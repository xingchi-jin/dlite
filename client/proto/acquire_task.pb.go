// Copyright 2022 Harness Inc. All rights reserved.
// Use of this source code is governed by the PolyForm Free Trial 1.0.0 license
// that can be found in the licenses directory at the root of this repository, also available at
// https://polyformproject.org/wp-content/uploads/2020/05/PolyForm-Free-Trial-1.0.0.txt.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: acquire_task.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Top level request object for acquiring tasks
type AcquireTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// There will be only one payload per request at current stage of implementation.
	// But it's always good to keep API definition plural for future extensibility.
	Task []*TaskPayload `protobuf:"bytes,1,rep,name=task,proto3" json:"task,omitempty"`
}

func (x *AcquireTasksResponse) Reset() {
	*x = AcquireTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acquire_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireTasksResponse) ProtoMessage() {}

func (x *AcquireTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acquire_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireTasksResponse.ProtoReflect.Descriptor instead.
func (*AcquireTasksResponse) Descriptor() ([]byte, []int) {
	return file_acquire_task_proto_rawDescGZIP(), []int{0}
}

func (x *AcquireTasksResponse) GetTask() []*TaskPayload {
	if x != nil {
		return x.Task
	}
	return nil
}

// All data that is needed to execute the job
type TaskPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Id for the request.
	// specifies the resource and method delegate will take actions about
	// With new architecture, we will bring 3 concepts as first class in delegate
	// 1. set up an execution infrastructure 2. executing steps 3. clean up execution infrastructure
	// When delegate acquires a RequestPayload, based on the resourceUri and resourceMethod it will invoke corresponding
	// handler to process the payload.
	// For example, when delegate receives POST /executioninfrastructure/{runnerType},
	// delegate will invoke the handler of creating an execution infra.
	// When delegate receives POST /execution/{runnerType},
	// delegate will invoke the handler of executing a task, in which it will call the corresponding runner's API to
	// execute the task.
	EventType        string     `protobuf:"bytes,2,opt,name=eventType,proto3" json:"eventType,omitempty"`
	RunnerType       string     `protobuf:"bytes,3,opt,name=runnerType,proto3" json:"runnerType,omitempty"`
	TaskData         *InputData `protobuf:"bytes,4,opt,name=task_data,json=taskData,proto3" json:"task_data,omitempty"`                           // binary data for task inputs.
	InfraData        *InputData `protobuf:"bytes,5,opt,name=infra_data,json=infraData,proto3" json:"infra_data,omitempty"`                        // binary data for infra config
	ExecutionInfraId string     `protobuf:"bytes,6,opt,name=execution_infra_id,json=executionInfraId,proto3" json:"execution_infra_id,omitempty"` // Id for the execution infra to use
	Secrets          []*Secret  `protobuf:"bytes,7,rep,name=secrets,proto3" json:"secrets,omitempty"`                                             // Secrets to be decrypted
	AccountId        string     `protobuf:"bytes,8,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	LogKey           string     `protobuf:"bytes,11,opt,name=log_key,json=logKey,proto3" json:"log_key,omitempty"`
}

func (x *TaskPayload) Reset() {
	*x = TaskPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acquire_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPayload) ProtoMessage() {}

func (x *TaskPayload) ProtoReflect() protoreflect.Message {
	mi := &file_acquire_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPayload.ProtoReflect.Descriptor instead.
func (*TaskPayload) Descriptor() ([]byte, []int) {
	return file_acquire_task_proto_rawDescGZIP(), []int{1}
}

func (x *TaskPayload) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskPayload) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *TaskPayload) GetRunnerType() string {
	if x != nil {
		return x.RunnerType
	}
	return ""
}

func (x *TaskPayload) GetTaskData() *InputData {
	if x != nil {
		return x.TaskData
	}
	return nil
}

func (x *TaskPayload) GetInfraData() *InputData {
	if x != nil {
		return x.InfraData
	}
	return nil
}

func (x *TaskPayload) GetExecutionInfraId() string {
	if x != nil {
		return x.ExecutionInfraId
	}
	return ""
}

func (x *TaskPayload) GetSecrets() []*Secret {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *TaskPayload) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TaskPayload) GetLogKey() string {
	if x != nil {
		return x.LogKey
	}
	return ""
}

var File_acquire_task_proto protoreflect.FileDescriptor

var file_acquire_task_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x14, 0x41, 0x63, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0xca, 0x02, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x72,
	0x61, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c,
	0x6f, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f,
	0x67, 0x4b, 0x65, 0x79, 0x42, 0x0e, 0x5a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_acquire_task_proto_rawDescOnce sync.Once
	file_acquire_task_proto_rawDescData = file_acquire_task_proto_rawDesc
)

func file_acquire_task_proto_rawDescGZIP() []byte {
	file_acquire_task_proto_rawDescOnce.Do(func() {
		file_acquire_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_acquire_task_proto_rawDescData)
	})
	return file_acquire_task_proto_rawDescData
}

var file_acquire_task_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_acquire_task_proto_goTypes = []interface{}{
	(*AcquireTasksResponse)(nil), // 0: proto.AcquireTasksResponse
	(*TaskPayload)(nil),          // 1: proto.TaskPayload
	(*InputData)(nil),            // 2: proto.InputData
	(*Secret)(nil),               // 3: proto.Secret
}
var file_acquire_task_proto_depIdxs = []int32{
	1, // 0: proto.AcquireTasksResponse.task:type_name -> proto.TaskPayload
	2, // 1: proto.TaskPayload.task_data:type_name -> proto.InputData
	2, // 2: proto.TaskPayload.infra_data:type_name -> proto.InputData
	3, // 3: proto.TaskPayload.secrets:type_name -> proto.Secret
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_acquire_task_proto_init() }
func file_acquire_task_proto_init() {
	if File_acquire_task_proto != nil {
		return
	}
	file_plugin_proto_init()
	file_secret_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_acquire_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquireTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acquire_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_acquire_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_acquire_task_proto_goTypes,
		DependencyIndexes: file_acquire_task_proto_depIdxs,
		MessageInfos:      file_acquire_task_proto_msgTypes,
	}.Build()
	File_acquire_task_proto = out.File
	file_acquire_task_proto_rawDesc = nil
	file_acquire_task_proto_goTypes = nil
	file_acquire_task_proto_depIdxs = nil
}
