// Copyright 2022 Harness Inc. All rights reserved.
// Use of this source code is governed by the PolyForm Free Trial 1.0.0 license
// that can be found in the licenses directory at the root of this repository, also available at
// https://polyformproject.org/wp-content/uploads/2020/05/PolyForm-Free-Trial-1.0.0.txt.

syntax = "proto3";

option go_package = "client/proto";

import "image_pull.proto";
import "resource.proto";
import "secret.proto";
import "plugin.proto";

import "google/protobuf/duration.proto";

package proto;

message K8SInfra {
  repeated K8SStep steps = 1;
  ImagePullSecret image_secret = 2;      // Secret needed to setup execution environment.
  ResourceRequirements compute = 3;      // Global resource requirements for infra types that need it (e.g. K8S CPU/Mem)
  map<string, string> env = 4;           // Any global env variables. Currently not used
  SecurityContext security_context = 5;  // Startup user id for the execution infra
  string working_dir = 6;                // Working dir that all tasks have read/write access to
  repeated Resource resources = 7;       // Any global resources like shared volumes
  string log_prefix = 8;
  string log_token = 9;  // Token for sending logs to logging service
  string service_account = 10;
}

message K8SStep {
  string id = 1;           // Id for the step
  ExecutionMode mode = 2;  // Is step going to be executed once or periodically
  ExecutionPriority priority =
      3;  // Priority of the step. Under heavier load, higher priority steps may have precedence
  ExecutionType execution_type = 4;  // Type of the step
  StepRuntime runtime = 5;           // Environment in which the task should run
  repeated SecretRef input_secrets =
      6;  // Task specific secrets' identifiers. One instance can contain multiple secrets from same provider
}

/*
  Defines the environment under which the step needs to be executed.
 */
message StepRuntime {
  string type = 1;  // Type of the plugin, can be anything from enum TaskType or any additional 3rd party plugins. It
  // can be left out if plugin can execute a single type of task
  PluginSource source = 2 [deprecated = true];  // type of the plugin. Supports only SOURCE_IMAGE
  string uses = 3
      [deprecated = true];           // source dependant location of the plugin (e.g. docker image tag, git repo etc...)
  ResourceRequirements compute = 6;  // Resource requirements for infra types that need it (e.g. K8S CPU/Mem)
  PluginInit init = 7;               // Any kind of init that needs to happen for the plugin (e.g. init script)
  map<string, string> env = 8;
  repeated string command = 9;
  repeated string arg = 10;
  SecurityContext security_context = 11;  // Startup user id for the execution infra
  string working_dir = 12;                // Working dir that all tasks have read/write access to
  ExecutionSchedule schedule = 14;        // Schedule on which the plugin runs, applies only for MODE_PERPETUAL
  Package source_package = 15;            // Connector and location of the source. e.g. docker image, git repo etc...
}
/*
  Any data about resource requirements (e.g. for container)
 */
message ResourceRequirements {
  string memory = 1;
  string cpu = 2;
  int32 replicas = 3;
  google.protobuf.Duration timeout = 4;
}

/*
  Anything needed to init the plugin (e.g. init script)
 */
message PluginInit {
  // TODO: This can be some sort of init script we run
}
/*
  Defines security context for running a task. Note these values would always be there (unless entire context is
  omitted) with their defaults. E.g.
    privileged = false; runAsUser = 0 (root); runAsNonRoot = false; allowPrivilegeEscalation = false;

 */
message SecurityContext {
  bool allow_privilege_escalation = 1;
  bool privileged = 2;
  string proc_mount = 3;
  bool read_only_root_filesystem = 4;
  bool run_as_non_root = 5;
  int64 run_as_group = 6;
  int64 run_as_user = 7;
  repeated string add_capability = 8;
  repeated string drop_capability = 9;
}

/*
 Specifies the execution mode of the Job. Delegate doesn't really care about sync/async (everything is async), but cares
 about how many times the job runs and at which priority. UNKNOWN mode should not be used
 */
enum ExecutionMode {
  MODE_UNKNOWN = 0;
  MODE_ONCE = 1;
  MODE_SCHEDULE = 2;
}

/*
  Most of the jobs should be DEFAULT priority. For anything that is related to rendering UI we can use HIGH. UNKNOWN
  priority should not be used
 */
enum ExecutionPriority {
  PRIORITY_UNKNOWN = 0;
  PRIORITY_DEFAULT = 1;
  PRIORITY_HIGH = 2;
}

enum ExecutionType {
  TYPE_UNKNOWN = 0;
  TYPE_PLUGIN = 1;
  TYPE_BACKGROUND = 2;
}

/*
  How to get runnable binary of the plugin e.g. docker image, git repo, binary to execute etc... UNKNOWN source should
  not be used
 */
enum PluginSource {
  SOURCE_UNKNOWN = 0;
  SOURCE_IMAGE = 1;
  SOURCE_GIT = 2;
}

message Package {
  PluginSource source_type = 1;
  string uses =
      2;  // source dependent location of the plugin (e.g. docker image fully qualified name, git repo etc...).
  oneof connector {
    ImagePullSecret container_registry = 3;  // TODO: support git connectors
  }
}
