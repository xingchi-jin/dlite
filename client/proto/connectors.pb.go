// Copyright 2024 Harness Inc. All rights reserved.
// Use of this source code is governed by the PolyForm Free Trial 1.0.0 license
// that can be found in the licenses directory at the root of this repository, also available at
// https://polyformproject.org/wp-content/uploads/2020/05/PolyForm-Free-Trial-1.0.0.txt.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: connectors.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GcpCredentialType int32

const (
	GcpCredentialType_GCP_CREDENTIAL_TYPE_UNSPECIFIED GcpCredentialType = 0
	GcpCredentialType_GCP_INHERIT_FROM_DELEGATE       GcpCredentialType = 1
	GcpCredentialType_GCP_MANUAL_CREDENTIALS          GcpCredentialType = 2
	GcpCredentialType_GCP_OIDC_AUTHENTICATION         GcpCredentialType = 3 // TODO
)

// Enum value maps for GcpCredentialType.
var (
	GcpCredentialType_name = map[int32]string{
		0: "GCP_CREDENTIAL_TYPE_UNSPECIFIED",
		1: "GCP_INHERIT_FROM_DELEGATE",
		2: "GCP_MANUAL_CREDENTIALS",
		3: "GCP_OIDC_AUTHENTICATION",
	}
	GcpCredentialType_value = map[string]int32{
		"GCP_CREDENTIAL_TYPE_UNSPECIFIED": 0,
		"GCP_INHERIT_FROM_DELEGATE":       1,
		"GCP_MANUAL_CREDENTIALS":          2,
		"GCP_OIDC_AUTHENTICATION":         3,
	}
)

func (x GcpCredentialType) Enum() *GcpCredentialType {
	p := new(GcpCredentialType)
	*p = x
	return p
}

func (x GcpCredentialType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GcpCredentialType) Descriptor() protoreflect.EnumDescriptor {
	return file_connectors_proto_enumTypes[0].Descriptor()
}

func (GcpCredentialType) Type() protoreflect.EnumType {
	return &file_connectors_proto_enumTypes[0]
}

func (x GcpCredentialType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GcpCredentialType.Descriptor instead.
func (GcpCredentialType) EnumDescriptor() ([]byte, []int) {
	return file_connectors_proto_rawDescGZIP(), []int{0}
}

type AzureEnvironmentType int32

const (
	AzureEnvironmentType_AZURE_ENVIRONMENT_TYPE_UNSPECIFIED AzureEnvironmentType = 0
	AzureEnvironmentType_AZURE_ENVIRONMENT                  AzureEnvironmentType = 1
	AzureEnvironmentType_AZURE_US_GOVERNMENT                AzureEnvironmentType = 2
)

// Enum value maps for AzureEnvironmentType.
var (
	AzureEnvironmentType_name = map[int32]string{
		0: "AZURE_ENVIRONMENT_TYPE_UNSPECIFIED",
		1: "AZURE_ENVIRONMENT",
		2: "AZURE_US_GOVERNMENT",
	}
	AzureEnvironmentType_value = map[string]int32{
		"AZURE_ENVIRONMENT_TYPE_UNSPECIFIED": 0,
		"AZURE_ENVIRONMENT":                  1,
		"AZURE_US_GOVERNMENT":                2,
	}
)

func (x AzureEnvironmentType) Enum() *AzureEnvironmentType {
	p := new(AzureEnvironmentType)
	*p = x
	return p
}

func (x AzureEnvironmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AzureEnvironmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_connectors_proto_enumTypes[1].Descriptor()
}

func (AzureEnvironmentType) Type() protoreflect.EnumType {
	return &file_connectors_proto_enumTypes[1]
}

func (x AzureEnvironmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AzureEnvironmentType.Descriptor instead.
func (AzureEnvironmentType) EnumDescriptor() ([]byte, []int) {
	return file_connectors_proto_rawDescGZIP(), []int{1}
}

type AzureAuthenticationType int32

const (
	AzureAuthenticationType_AZURE_AUTHENTICATION_TYPE_UNSPECIFIED AzureAuthenticationType = 0
	AzureAuthenticationType_SERVICE_PRINCIPAL_SECRET              AzureAuthenticationType = 1
	AzureAuthenticationType_SERVICE_PRINCIPAL_CERT                AzureAuthenticationType = 2
	AzureAuthenticationType_MANAGED_IDENTITY_SYSTEM_ASSIGNED      AzureAuthenticationType = 3
	AzureAuthenticationType_MANAGED_IDENTITY_USER_ASSIGNED        AzureAuthenticationType = 4
)

// Enum value maps for AzureAuthenticationType.
var (
	AzureAuthenticationType_name = map[int32]string{
		0: "AZURE_AUTHENTICATION_TYPE_UNSPECIFIED",
		1: "SERVICE_PRINCIPAL_SECRET",
		2: "SERVICE_PRINCIPAL_CERT",
		3: "MANAGED_IDENTITY_SYSTEM_ASSIGNED",
		4: "MANAGED_IDENTITY_USER_ASSIGNED",
	}
	AzureAuthenticationType_value = map[string]int32{
		"AZURE_AUTHENTICATION_TYPE_UNSPECIFIED": 0,
		"SERVICE_PRINCIPAL_SECRET":              1,
		"SERVICE_PRINCIPAL_CERT":                2,
		"MANAGED_IDENTITY_SYSTEM_ASSIGNED":      3,
		"MANAGED_IDENTITY_USER_ASSIGNED":        4,
	}
)

func (x AzureAuthenticationType) Enum() *AzureAuthenticationType {
	p := new(AzureAuthenticationType)
	*p = x
	return p
}

func (x AzureAuthenticationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AzureAuthenticationType) Descriptor() protoreflect.EnumDescriptor {
	return file_connectors_proto_enumTypes[2].Descriptor()
}

func (AzureAuthenticationType) Type() protoreflect.EnumType {
	return &file_connectors_proto_enumTypes[2]
}

func (x AzureAuthenticationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AzureAuthenticationType.Descriptor instead.
func (AzureAuthenticationType) EnumDescriptor() ([]byte, []int) {
	return file_connectors_proto_rawDescGZIP(), []int{2}
}

type AwsCredentialType int32

const (
	AwsCredentialType_AWS_CREDENTIAL_TYPE_UNSPECIFIED AwsCredentialType = 0
	AwsCredentialType_AWS_INHERIT_FROM_DELEGATE       AwsCredentialType = 1
	AwsCredentialType_AWS_MANUAL_CREDENTIALS          AwsCredentialType = 2
	AwsCredentialType_AWS_IRSA                        AwsCredentialType = 3
)

// Enum value maps for AwsCredentialType.
var (
	AwsCredentialType_name = map[int32]string{
		0: "AWS_CREDENTIAL_TYPE_UNSPECIFIED",
		1: "AWS_INHERIT_FROM_DELEGATE",
		2: "AWS_MANUAL_CREDENTIALS",
		3: "AWS_IRSA",
	}
	AwsCredentialType_value = map[string]int32{
		"AWS_CREDENTIAL_TYPE_UNSPECIFIED": 0,
		"AWS_INHERIT_FROM_DELEGATE":       1,
		"AWS_MANUAL_CREDENTIALS":          2,
		"AWS_IRSA":                        3,
	}
)

func (x AwsCredentialType) Enum() *AwsCredentialType {
	p := new(AwsCredentialType)
	*p = x
	return p
}

func (x AwsCredentialType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AwsCredentialType) Descriptor() protoreflect.EnumDescriptor {
	return file_connectors_proto_enumTypes[3].Descriptor()
}

func (AwsCredentialType) Type() protoreflect.EnumType {
	return &file_connectors_proto_enumTypes[3]
}

func (x AwsCredentialType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AwsCredentialType.Descriptor instead.
func (AwsCredentialType) EnumDescriptor() ([]byte, []int) {
	return file_connectors_proto_rawDescGZIP(), []int{3}
}

// Proto definition for GCP connector. Currently supports image pull secret use-case only.
type GCPConnector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialType GcpCredentialType `protobuf:"varint,1,opt,name=credential_type,json=credentialType,proto3,enum=proto.GcpCredentialType" json:"credential_type,omitempty"`
	SecretKeyRef   *SecretRef        `protobuf:"bytes,2,opt,name=secretKeyRef,proto3" json:"secretKeyRef,omitempty"`
}

func (x *GCPConnector) Reset() {
	*x = GCPConnector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCPConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCPConnector) ProtoMessage() {}

func (x *GCPConnector) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCPConnector.ProtoReflect.Descriptor instead.
func (*GCPConnector) Descriptor() ([]byte, []int) {
	return file_connectors_proto_rawDescGZIP(), []int{0}
}

func (x *GCPConnector) GetCredentialType() GcpCredentialType {
	if x != nil {
		return x.CredentialType
	}
	return GcpCredentialType_GCP_CREDENTIAL_TYPE_UNSPECIFIED
}

func (x *GCPConnector) GetSecretKeyRef() *SecretRef {
	if x != nil {
		return x.SecretKeyRef
	}
	return nil
}

// Proto definition for Azure connector. Currently supports image pull secret use-case only.
type AzureConnector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId           string                  `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	ClientId           string                  `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	EnvironmentType    AzureEnvironmentType    `protobuf:"varint,3,opt,name=environment_type,json=environmentType,proto3,enum=proto.AzureEnvironmentType" json:"environment_type,omitempty"`
	AuthenticationType AzureAuthenticationType `protobuf:"varint,4,opt,name=authentication_type,json=authenticationType,proto3,enum=proto.AzureAuthenticationType" json:"authentication_type,omitempty"`
	SecretKey          *SecretRef              `protobuf:"bytes,5,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	ClientCert         *SecretRef              `protobuf:"bytes,6,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
}

func (x *AzureConnector) Reset() {
	*x = AzureConnector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureConnector) ProtoMessage() {}

func (x *AzureConnector) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureConnector.ProtoReflect.Descriptor instead.
func (*AzureConnector) Descriptor() ([]byte, []int) {
	return file_connectors_proto_rawDescGZIP(), []int{1}
}

func (x *AzureConnector) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *AzureConnector) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AzureConnector) GetEnvironmentType() AzureEnvironmentType {
	if x != nil {
		return x.EnvironmentType
	}
	return AzureEnvironmentType_AZURE_ENVIRONMENT_TYPE_UNSPECIFIED
}

func (x *AzureConnector) GetAuthenticationType() AzureAuthenticationType {
	if x != nil {
		return x.AuthenticationType
	}
	return AzureAuthenticationType_AZURE_AUTHENTICATION_TYPE_UNSPECIFIED
}

func (x *AzureConnector) GetSecretKey() *SecretRef {
	if x != nil {
		return x.SecretKey
	}
	return nil
}

func (x *AzureConnector) GetClientCert() *SecretRef {
	if x != nil {
		return x.ClientCert
	}
	return nil
}

// Proto definition for AWS connector. Currently supports image pull secret use-case only.
type AWSConnector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialType     AwsCredentialType   `protobuf:"varint,1,opt,name=credential_type,json=credentialType,proto3,enum=proto.AwsCredentialType" json:"credential_type,omitempty"`
	CrossAccountAccess *CrossAccountAccess `protobuf:"bytes,2,opt,name=cross_account_access,json=crossAccountAccess,proto3" json:"cross_account_access,omitempty"`
	AccessKey          *SecretRef          `protobuf:"bytes,3,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey          *SecretRef          `protobuf:"bytes,4,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
}

func (x *AWSConnector) Reset() {
	*x = AWSConnector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSConnector) ProtoMessage() {}

func (x *AWSConnector) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSConnector.ProtoReflect.Descriptor instead.
func (*AWSConnector) Descriptor() ([]byte, []int) {
	return file_connectors_proto_rawDescGZIP(), []int{2}
}

func (x *AWSConnector) GetCredentialType() AwsCredentialType {
	if x != nil {
		return x.CredentialType
	}
	return AwsCredentialType_AWS_CREDENTIAL_TYPE_UNSPECIFIED
}

func (x *AWSConnector) GetCrossAccountAccess() *CrossAccountAccess {
	if x != nil {
		return x.CrossAccountAccess
	}
	return nil
}

func (x *AWSConnector) GetAccessKey() *SecretRef {
	if x != nil {
		return x.AccessKey
	}
	return nil
}

func (x *AWSConnector) GetSecretKey() *SecretRef {
	if x != nil {
		return x.SecretKey
	}
	return nil
}

type CrossAccountAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrossAccountRoleArn string `protobuf:"bytes,1,opt,name=cross_account_role_arn,json=crossAccountRoleArn,proto3" json:"cross_account_role_arn,omitempty"`
	ExternalId          string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (x *CrossAccountAccess) Reset() {
	*x = CrossAccountAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossAccountAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossAccountAccess) ProtoMessage() {}

func (x *CrossAccountAccess) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossAccountAccess.ProtoReflect.Descriptor instead.
func (*CrossAccountAccess) Descriptor() ([]byte, []int) {
	return file_connectors_proto_rawDescGZIP(), []int{3}
}

func (x *CrossAccountAccess) GetCrossAccountRoleArn() string {
	if x != nil {
		return x.CrossAccountRoleArn
	}
	return ""
}

func (x *CrossAccountAccess) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

type DockerConnector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Username:
	//
	//	*DockerConnector_PlainUsername
	//	*DockerConnector_EncryptedUsername
	Username isDockerConnector_Username `protobuf_oneof:"username"`
	Password *SecretRef                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *DockerConnector) Reset() {
	*x = DockerConnector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectors_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerConnector) ProtoMessage() {}

func (x *DockerConnector) ProtoReflect() protoreflect.Message {
	mi := &file_connectors_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerConnector.ProtoReflect.Descriptor instead.
func (*DockerConnector) Descriptor() ([]byte, []int) {
	return file_connectors_proto_rawDescGZIP(), []int{4}
}

func (m *DockerConnector) GetUsername() isDockerConnector_Username {
	if m != nil {
		return m.Username
	}
	return nil
}

func (x *DockerConnector) GetPlainUsername() string {
	if x, ok := x.GetUsername().(*DockerConnector_PlainUsername); ok {
		return x.PlainUsername
	}
	return ""
}

func (x *DockerConnector) GetEncryptedUsername() *SecretRef {
	if x, ok := x.GetUsername().(*DockerConnector_EncryptedUsername); ok {
		return x.EncryptedUsername
	}
	return nil
}

func (x *DockerConnector) GetPassword() *SecretRef {
	if x != nil {
		return x.Password
	}
	return nil
}

type isDockerConnector_Username interface {
	isDockerConnector_Username()
}

type DockerConnector_PlainUsername struct {
	PlainUsername string `protobuf:"bytes,1,opt,name=plain_username,json=plainUsername,proto3,oneof"`
}

type DockerConnector_EncryptedUsername struct {
	EncryptedUsername *SecretRef `protobuf:"bytes,2,opt,name=encrypted_username,json=encryptedUsername,proto3,oneof"`
}

func (*DockerConnector_PlainUsername) isDockerConnector_Username() {}

func (*DockerConnector_EncryptedUsername) isDockerConnector_Username() {}

var File_connectors_proto protoreflect.FileDescriptor

var file_connectors_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x0c, 0x47, 0x43, 0x50, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x63, 0x70, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x66, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x66, 0x22, 0xc7, 0x02, 0x0a, 0x0e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x46,
	0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x66, 0x52, 0x09, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x66, 0x52,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x0c,
	0x41, 0x57, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x77,
	0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4b, 0x0a, 0x14, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x12, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x66, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a,
	0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x66, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x6a,
	0x0a, 0x12, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x27,
	0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x66, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x90, 0x01, 0x0a, 0x11, 0x47, 0x63, 0x70, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x43,
	0x50, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x47, 0x43, 0x50, 0x5f, 0x49, 0x4e, 0x48, 0x45, 0x52, 0x49, 0x54, 0x5f, 0x46,
	0x52, 0x4f, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x47, 0x43, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x43, 0x52, 0x45,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x43,
	0x50, 0x5f, 0x4f, 0x49, 0x44, 0x43, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x6e, 0x0a, 0x14, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x22, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x5a, 0x55, 0x52, 0x45,
	0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x55, 0x53, 0x5f, 0x47, 0x4f, 0x56, 0x45, 0x52,
	0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0xc8, 0x01, 0x0a, 0x17, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x43, 0x49,
	0x50, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x41,
	0x4c, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x44, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x22,
	0x0a, 0x1e, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44,
	0x10, 0x04, 0x2a, 0x81, 0x01, 0x0a, 0x11, 0x41, 0x77, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x57, 0x53, 0x5f,
	0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a,
	0x19, 0x41, 0x57, 0x53, 0x5f, 0x49, 0x4e, 0x48, 0x45, 0x52, 0x49, 0x54, 0x5f, 0x46, 0x52, 0x4f,
	0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x41, 0x57, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x57, 0x53, 0x5f,
	0x49, 0x52, 0x53, 0x41, 0x10, 0x03, 0x42, 0x0e, 0x5a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_connectors_proto_rawDescOnce sync.Once
	file_connectors_proto_rawDescData = file_connectors_proto_rawDesc
)

func file_connectors_proto_rawDescGZIP() []byte {
	file_connectors_proto_rawDescOnce.Do(func() {
		file_connectors_proto_rawDescData = protoimpl.X.CompressGZIP(file_connectors_proto_rawDescData)
	})
	return file_connectors_proto_rawDescData
}

var file_connectors_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_connectors_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_connectors_proto_goTypes = []interface{}{
	(GcpCredentialType)(0),       // 0: proto.GcpCredentialType
	(AzureEnvironmentType)(0),    // 1: proto.AzureEnvironmentType
	(AzureAuthenticationType)(0), // 2: proto.AzureAuthenticationType
	(AwsCredentialType)(0),       // 3: proto.AwsCredentialType
	(*GCPConnector)(nil),         // 4: proto.GCPConnector
	(*AzureConnector)(nil),       // 5: proto.AzureConnector
	(*AWSConnector)(nil),         // 6: proto.AWSConnector
	(*CrossAccountAccess)(nil),   // 7: proto.CrossAccountAccess
	(*DockerConnector)(nil),      // 8: proto.DockerConnector
	(*SecretRef)(nil),            // 9: proto.SecretRef
}
var file_connectors_proto_depIdxs = []int32{
	0,  // 0: proto.GCPConnector.credential_type:type_name -> proto.GcpCredentialType
	9,  // 1: proto.GCPConnector.secretKeyRef:type_name -> proto.SecretRef
	1,  // 2: proto.AzureConnector.environment_type:type_name -> proto.AzureEnvironmentType
	2,  // 3: proto.AzureConnector.authentication_type:type_name -> proto.AzureAuthenticationType
	9,  // 4: proto.AzureConnector.secret_key:type_name -> proto.SecretRef
	9,  // 5: proto.AzureConnector.client_cert:type_name -> proto.SecretRef
	3,  // 6: proto.AWSConnector.credential_type:type_name -> proto.AwsCredentialType
	7,  // 7: proto.AWSConnector.cross_account_access:type_name -> proto.CrossAccountAccess
	9,  // 8: proto.AWSConnector.access_key:type_name -> proto.SecretRef
	9,  // 9: proto.AWSConnector.secret_key:type_name -> proto.SecretRef
	9,  // 10: proto.DockerConnector.encrypted_username:type_name -> proto.SecretRef
	9,  // 11: proto.DockerConnector.password:type_name -> proto.SecretRef
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_connectors_proto_init() }
func file_connectors_proto_init() {
	if File_connectors_proto != nil {
		return
	}
	file_secret_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_connectors_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCPConnector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureConnector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSConnector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossAccountAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectors_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerConnector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_connectors_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*DockerConnector_PlainUsername)(nil),
		(*DockerConnector_EncryptedUsername)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_connectors_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_connectors_proto_goTypes,
		DependencyIndexes: file_connectors_proto_depIdxs,
		EnumInfos:         file_connectors_proto_enumTypes,
		MessageInfos:      file_connectors_proto_msgTypes,
	}.Build()
	File_connectors_proto = out.File
	file_connectors_proto_rawDesc = nil
	file_connectors_proto_goTypes = nil
	file_connectors_proto_depIdxs = nil
}
