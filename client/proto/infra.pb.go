// Copyright 2022 Harness Inc. All rights reserved.
// Use of this source code is governed by the PolyForm Free Trial 1.0.0 license
// that can be found in the licenses directory at the root of this repository, also available at
// https://polyformproject.org/wp-content/uploads/2020/05/PolyForm-Free-Trial-1.0.0.txt.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: infra.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Specifies the execution mode of the Job. Delegate doesn't really care about sync/async (everything is async), but cares
// about how many times the job runs and at which priority. UNKNOWN mode should not be used
type ExecutionMode int32

const (
	ExecutionMode_MODE_UNKNOWN  ExecutionMode = 0
	ExecutionMode_MODE_ONCE     ExecutionMode = 1
	ExecutionMode_MODE_SCHEDULE ExecutionMode = 2
)

// Enum value maps for ExecutionMode.
var (
	ExecutionMode_name = map[int32]string{
		0: "MODE_UNKNOWN",
		1: "MODE_ONCE",
		2: "MODE_SCHEDULE",
	}
	ExecutionMode_value = map[string]int32{
		"MODE_UNKNOWN":  0,
		"MODE_ONCE":     1,
		"MODE_SCHEDULE": 2,
	}
)

func (x ExecutionMode) Enum() *ExecutionMode {
	p := new(ExecutionMode)
	*p = x
	return p
}

func (x ExecutionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_proto_enumTypes[0].Descriptor()
}

func (ExecutionMode) Type() protoreflect.EnumType {
	return &file_infra_proto_enumTypes[0]
}

func (x ExecutionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionMode.Descriptor instead.
func (ExecutionMode) EnumDescriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{0}
}

// Most of the jobs should be DEFAULT priority. For anything that is related to rendering UI we can use HIGH. UNKNOWN
// priority should not be used
type ExecutionPriority int32

const (
	ExecutionPriority_PRIORITY_UNKNOWN ExecutionPriority = 0
	ExecutionPriority_PRIORITY_DEFAULT ExecutionPriority = 1
	ExecutionPriority_PRIORITY_HIGH    ExecutionPriority = 2
)

// Enum value maps for ExecutionPriority.
var (
	ExecutionPriority_name = map[int32]string{
		0: "PRIORITY_UNKNOWN",
		1: "PRIORITY_DEFAULT",
		2: "PRIORITY_HIGH",
	}
	ExecutionPriority_value = map[string]int32{
		"PRIORITY_UNKNOWN": 0,
		"PRIORITY_DEFAULT": 1,
		"PRIORITY_HIGH":    2,
	}
)

func (x ExecutionPriority) Enum() *ExecutionPriority {
	p := new(ExecutionPriority)
	*p = x
	return p
}

func (x ExecutionPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_proto_enumTypes[1].Descriptor()
}

func (ExecutionPriority) Type() protoreflect.EnumType {
	return &file_infra_proto_enumTypes[1]
}

func (x ExecutionPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionPriority.Descriptor instead.
func (ExecutionPriority) EnumDescriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{1}
}

type ExecutionType int32

const (
	ExecutionType_TYPE_UNKNOWN    ExecutionType = 0
	ExecutionType_TYPE_PLUGIN     ExecutionType = 1
	ExecutionType_TYPE_BACKGROUND ExecutionType = 2
)

// Enum value maps for ExecutionType.
var (
	ExecutionType_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "TYPE_PLUGIN",
		2: "TYPE_BACKGROUND",
	}
	ExecutionType_value = map[string]int32{
		"TYPE_UNKNOWN":    0,
		"TYPE_PLUGIN":     1,
		"TYPE_BACKGROUND": 2,
	}
)

func (x ExecutionType) Enum() *ExecutionType {
	p := new(ExecutionType)
	*p = x
	return p
}

func (x ExecutionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionType) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_proto_enumTypes[2].Descriptor()
}

func (ExecutionType) Type() protoreflect.EnumType {
	return &file_infra_proto_enumTypes[2]
}

func (x ExecutionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionType.Descriptor instead.
func (ExecutionType) EnumDescriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{2}
}

// How to get runnable binary of the plugin e.g. docker image, git repo, binary to execute etc... UNKNOWN source should
// not be used
type PluginSource int32

const (
	PluginSource_SOURCE_UNKNOWN PluginSource = 0
	PluginSource_SOURCE_IMAGE   PluginSource = 1
	PluginSource_SOURCE_GIT     PluginSource = 2
)

// Enum value maps for PluginSource.
var (
	PluginSource_name = map[int32]string{
		0: "SOURCE_UNKNOWN",
		1: "SOURCE_IMAGE",
		2: "SOURCE_GIT",
	}
	PluginSource_value = map[string]int32{
		"SOURCE_UNKNOWN": 0,
		"SOURCE_IMAGE":   1,
		"SOURCE_GIT":     2,
	}
)

func (x PluginSource) Enum() *PluginSource {
	p := new(PluginSource)
	*p = x
	return p
}

func (x PluginSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluginSource) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_proto_enumTypes[3].Descriptor()
}

func (PluginSource) Type() protoreflect.EnumType {
	return &file_infra_proto_enumTypes[3]
}

func (x PluginSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluginSource.Descriptor instead.
func (PluginSource) EnumDescriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{3}
}

type K8SInfra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steps           []*K8SStep            `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
	ImageSecret     *ImagePullSecret      `protobuf:"bytes,2,opt,name=image_secret,json=imageSecret,proto3" json:"image_secret,omitempty"`                                                      // Secret needed to setup execution environment.
	Compute         *ResourceRequirements `protobuf:"bytes,3,opt,name=compute,proto3" json:"compute,omitempty"`                                                                                 // Global resource requirements for infra types that need it (e.g. K8S CPU/Mem)
	Env             map[string]string     `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Any global env variables. Currently not used
	SecurityContext *SecurityContext      `protobuf:"bytes,5,opt,name=security_context,json=securityContext,proto3" json:"security_context,omitempty"`                                          // Startup user id for the execution infra
	WorkingDir      string                `protobuf:"bytes,6,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`                                                         // Working dir that all tasks have read/write access to
	Resources       []*Resource           `protobuf:"bytes,7,rep,name=resources,proto3" json:"resources,omitempty"`                                                                             // Any global resources like shared volumes
	LogPrefix       string                `protobuf:"bytes,8,opt,name=log_prefix,json=logPrefix,proto3" json:"log_prefix,omitempty"`
	LogToken        string                `protobuf:"bytes,9,opt,name=log_token,json=logToken,proto3" json:"log_token,omitempty"` // Token for sending logs to logging service
	ServiceAccount  string                `protobuf:"bytes,10,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
}

func (x *K8SInfra) Reset() {
	*x = K8SInfra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SInfra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SInfra) ProtoMessage() {}

func (x *K8SInfra) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SInfra.ProtoReflect.Descriptor instead.
func (*K8SInfra) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{0}
}

func (x *K8SInfra) GetSteps() []*K8SStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *K8SInfra) GetImageSecret() *ImagePullSecret {
	if x != nil {
		return x.ImageSecret
	}
	return nil
}

func (x *K8SInfra) GetCompute() *ResourceRequirements {
	if x != nil {
		return x.Compute
	}
	return nil
}

func (x *K8SInfra) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *K8SInfra) GetSecurityContext() *SecurityContext {
	if x != nil {
		return x.SecurityContext
	}
	return nil
}

func (x *K8SInfra) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *K8SInfra) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *K8SInfra) GetLogPrefix() string {
	if x != nil {
		return x.LogPrefix
	}
	return ""
}

func (x *K8SInfra) GetLogToken() string {
	if x != nil {
		return x.LogToken
	}
	return ""
}

func (x *K8SInfra) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

type K8SStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                      // Id for the step
	Mode          ExecutionMode     `protobuf:"varint,2,opt,name=mode,proto3,enum=proto.ExecutionMode" json:"mode,omitempty"`                                        // Is step going to be executed once or periodically
	Priority      ExecutionPriority `protobuf:"varint,3,opt,name=priority,proto3,enum=proto.ExecutionPriority" json:"priority,omitempty"`                            // Priority of the step. Under heavier load, higher priority steps may have precedence
	ExecutionType ExecutionType     `protobuf:"varint,4,opt,name=execution_type,json=executionType,proto3,enum=proto.ExecutionType" json:"execution_type,omitempty"` // Type of the step
	Runtime       *StepRuntime      `protobuf:"bytes,5,opt,name=runtime,proto3" json:"runtime,omitempty"`                                                            // Environment in which the task should run
	InputSecrets  []*SecretRef      `protobuf:"bytes,6,rep,name=input_secrets,json=inputSecrets,proto3" json:"input_secrets,omitempty"`                              // Task specific secrets' identifiers. One instance can contain multiple secrets from same provider
}

func (x *K8SStep) Reset() {
	*x = K8SStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SStep) ProtoMessage() {}

func (x *K8SStep) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SStep.ProtoReflect.Descriptor instead.
func (*K8SStep) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{1}
}

func (x *K8SStep) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *K8SStep) GetMode() ExecutionMode {
	if x != nil {
		return x.Mode
	}
	return ExecutionMode_MODE_UNKNOWN
}

func (x *K8SStep) GetPriority() ExecutionPriority {
	if x != nil {
		return x.Priority
	}
	return ExecutionPriority_PRIORITY_UNKNOWN
}

func (x *K8SStep) GetExecutionType() ExecutionType {
	if x != nil {
		return x.ExecutionType
	}
	return ExecutionType_TYPE_UNKNOWN
}

func (x *K8SStep) GetRuntime() *StepRuntime {
	if x != nil {
		return x.Runtime
	}
	return nil
}

func (x *K8SStep) GetInputSecrets() []*SecretRef {
	if x != nil {
		return x.InputSecrets
	}
	return nil
}

// Defines the environment under which the step needs to be executed.
type StepRuntime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // Type of the plugin, can be anything from enum TaskType or any additional 3rd party plugins. It
	// can be left out if plugin can execute a single type of task
	//
	// Deprecated: Marked as deprecated in infra.proto.
	Source PluginSource `protobuf:"varint,2,opt,name=source,proto3,enum=proto.PluginSource" json:"source,omitempty"` // type of the plugin. Supports only SOURCE_IMAGE
	// Deprecated: Marked as deprecated in infra.proto.
	Uses            string                `protobuf:"bytes,3,opt,name=uses,proto3" json:"uses,omitempty"`       // source dependant location of the plugin (e.g. docker image tag, git repo etc...)
	Compute         *ResourceRequirements `protobuf:"bytes,6,opt,name=compute,proto3" json:"compute,omitempty"` // Resource requirements for infra types that need it (e.g. K8S CPU/Mem)
	Init            *PluginInit           `protobuf:"bytes,7,opt,name=init,proto3" json:"init,omitempty"`       // Any kind of init that needs to happen for the plugin (e.g. init script)
	Env             map[string]string     `protobuf:"bytes,8,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Command         []string              `protobuf:"bytes,9,rep,name=command,proto3" json:"command,omitempty"`
	Arg             []string              `protobuf:"bytes,10,rep,name=arg,proto3" json:"arg,omitempty"`
	SecurityContext *SecurityContext      `protobuf:"bytes,11,opt,name=security_context,json=securityContext,proto3" json:"security_context,omitempty"` // Startup user id for the execution infra
	WorkingDir      string                `protobuf:"bytes,12,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`                // Working dir that all tasks have read/write access to
	Schedule        *ExecutionSchedule    `protobuf:"bytes,14,opt,name=schedule,proto3" json:"schedule,omitempty"`                                      // Schedule on which the plugin runs, applies only for MODE_PERPETUAL
	SourcePackage   *Package              `protobuf:"bytes,15,opt,name=source_package,json=sourcePackage,proto3" json:"source_package,omitempty"`       // Connector and location of the source. e.g. docker image, git repo etc...
}

func (x *StepRuntime) Reset() {
	*x = StepRuntime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepRuntime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepRuntime) ProtoMessage() {}

func (x *StepRuntime) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepRuntime.ProtoReflect.Descriptor instead.
func (*StepRuntime) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{2}
}

func (x *StepRuntime) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Deprecated: Marked as deprecated in infra.proto.
func (x *StepRuntime) GetSource() PluginSource {
	if x != nil {
		return x.Source
	}
	return PluginSource_SOURCE_UNKNOWN
}

// Deprecated: Marked as deprecated in infra.proto.
func (x *StepRuntime) GetUses() string {
	if x != nil {
		return x.Uses
	}
	return ""
}

func (x *StepRuntime) GetCompute() *ResourceRequirements {
	if x != nil {
		return x.Compute
	}
	return nil
}

func (x *StepRuntime) GetInit() *PluginInit {
	if x != nil {
		return x.Init
	}
	return nil
}

func (x *StepRuntime) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *StepRuntime) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *StepRuntime) GetArg() []string {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *StepRuntime) GetSecurityContext() *SecurityContext {
	if x != nil {
		return x.SecurityContext
	}
	return nil
}

func (x *StepRuntime) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *StepRuntime) GetSchedule() *ExecutionSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *StepRuntime) GetSourcePackage() *Package {
	if x != nil {
		return x.SourcePackage
	}
	return nil
}

// Any data about resource requirements (e.g. for container)
type ResourceRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memory   string               `protobuf:"bytes,1,opt,name=memory,proto3" json:"memory,omitempty"`
	Cpu      string               `protobuf:"bytes,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Replicas int32                `protobuf:"varint,3,opt,name=replicas,proto3" json:"replicas,omitempty"`
	Timeout  *durationpb.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *ResourceRequirements) Reset() {
	*x = ResourceRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequirements) ProtoMessage() {}

func (x *ResourceRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequirements.ProtoReflect.Descriptor instead.
func (*ResourceRequirements) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceRequirements) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *ResourceRequirements) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *ResourceRequirements) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *ResourceRequirements) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

// Anything needed to init the plugin (e.g. init script)
type PluginInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PluginInit) Reset() {
	*x = PluginInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginInit) ProtoMessage() {}

func (x *PluginInit) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginInit.ProtoReflect.Descriptor instead.
func (*PluginInit) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{4}
}

// Defines security context for running a task. Note these values would always be there (unless entire context is
// omitted) with their defaults. E.g.
// privileged = false; runAsUser = 0 (root); runAsNonRoot = false; allowPrivilegeEscalation = false;
type SecurityContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowPrivilegeEscalation bool     `protobuf:"varint,1,opt,name=allow_privilege_escalation,json=allowPrivilegeEscalation,proto3" json:"allow_privilege_escalation,omitempty"`
	Privileged               bool     `protobuf:"varint,2,opt,name=privileged,proto3" json:"privileged,omitempty"`
	ProcMount                string   `protobuf:"bytes,3,opt,name=proc_mount,json=procMount,proto3" json:"proc_mount,omitempty"`
	ReadOnlyRootFilesystem   bool     `protobuf:"varint,4,opt,name=read_only_root_filesystem,json=readOnlyRootFilesystem,proto3" json:"read_only_root_filesystem,omitempty"`
	RunAsNonRoot             bool     `protobuf:"varint,5,opt,name=run_as_non_root,json=runAsNonRoot,proto3" json:"run_as_non_root,omitempty"`
	RunAsGroup               int64    `protobuf:"varint,6,opt,name=run_as_group,json=runAsGroup,proto3" json:"run_as_group,omitempty"`
	RunAsUser                int64    `protobuf:"varint,7,opt,name=run_as_user,json=runAsUser,proto3" json:"run_as_user,omitempty"`
	AddCapability            []string `protobuf:"bytes,8,rep,name=add_capability,json=addCapability,proto3" json:"add_capability,omitempty"`
	DropCapability           []string `protobuf:"bytes,9,rep,name=drop_capability,json=dropCapability,proto3" json:"drop_capability,omitempty"`
}

func (x *SecurityContext) Reset() {
	*x = SecurityContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityContext) ProtoMessage() {}

func (x *SecurityContext) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityContext.ProtoReflect.Descriptor instead.
func (*SecurityContext) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{5}
}

func (x *SecurityContext) GetAllowPrivilegeEscalation() bool {
	if x != nil {
		return x.AllowPrivilegeEscalation
	}
	return false
}

func (x *SecurityContext) GetPrivileged() bool {
	if x != nil {
		return x.Privileged
	}
	return false
}

func (x *SecurityContext) GetProcMount() string {
	if x != nil {
		return x.ProcMount
	}
	return ""
}

func (x *SecurityContext) GetReadOnlyRootFilesystem() bool {
	if x != nil {
		return x.ReadOnlyRootFilesystem
	}
	return false
}

func (x *SecurityContext) GetRunAsNonRoot() bool {
	if x != nil {
		return x.RunAsNonRoot
	}
	return false
}

func (x *SecurityContext) GetRunAsGroup() int64 {
	if x != nil {
		return x.RunAsGroup
	}
	return 0
}

func (x *SecurityContext) GetRunAsUser() int64 {
	if x != nil {
		return x.RunAsUser
	}
	return 0
}

func (x *SecurityContext) GetAddCapability() []string {
	if x != nil {
		return x.AddCapability
	}
	return nil
}

func (x *SecurityContext) GetDropCapability() []string {
	if x != nil {
		return x.DropCapability
	}
	return nil
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceType PluginSource `protobuf:"varint,1,opt,name=source_type,json=sourceType,proto3,enum=proto.PluginSource" json:"source_type,omitempty"`
	Uses       string       `protobuf:"bytes,2,opt,name=uses,proto3" json:"uses,omitempty"` // source dependent location of the plugin (e.g. docker image fully qualified name, git repo etc...).
	// Types that are assignable to Connector:
	//
	//	*Package_ContainerRegistry
	Connector isPackage_Connector `protobuf_oneof:"connector"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{6}
}

func (x *Package) GetSourceType() PluginSource {
	if x != nil {
		return x.SourceType
	}
	return PluginSource_SOURCE_UNKNOWN
}

func (x *Package) GetUses() string {
	if x != nil {
		return x.Uses
	}
	return ""
}

func (m *Package) GetConnector() isPackage_Connector {
	if m != nil {
		return m.Connector
	}
	return nil
}

func (x *Package) GetContainerRegistry() *ImagePullSecret {
	if x, ok := x.GetConnector().(*Package_ContainerRegistry); ok {
		return x.ContainerRegistry
	}
	return nil
}

type isPackage_Connector interface {
	isPackage_Connector()
}

type Package_ContainerRegistry struct {
	ContainerRegistry *ImagePullSecret `protobuf:"bytes,3,opt,name=container_registry,json=containerRegistry,proto3,oneof"` // TODO: support git connectors
}

func (*Package_ContainerRegistry) isPackage_Connector() {}

var File_infra_proto protoreflect.FileDescriptor

var file_infra_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x75, 0x6c, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xfe, 0x03, 0x0a, 0x08, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x12,
	0x24, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x38, 0x53, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05,
	0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x38, 0x53,
	0x49, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03,
	0x65, 0x6e, 0x76, 0x12, 0x41, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x2d, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x36, 0x0a, 0x08, 0x45,
	0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x9b, 0x02, 0x0a, 0x07, 0x4b, 0x38, 0x53, 0x53, 0x74, 0x65, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x3b, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x07,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0d, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x66, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x22, 0xac, 0x04, 0x0a, 0x0b, 0x53, 0x74, 0x65, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x73, 0x12, 0x35,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x03,
	0x65, 0x6e, 0x76, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x45, 0x6e,
	0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x67, 0x12, 0x41, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x35, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x91, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x70, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12,
	0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0x0c, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e,
	0x69, 0x74, 0x22, 0x82, 0x03, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x6f, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x25,
	0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x41, 0x73, 0x4e, 0x6f,
	0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x5f, 0x61, 0x73, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x75, 0x6e,
	0x41, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x5f, 0x61,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x75,
	0x6e, 0x41, 0x73, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x64, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xa9, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x73, 0x12, 0x47, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2a, 0x43, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f,
	0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x52, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x49,
	0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x2a, 0x47, 0x0a, 0x0d,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x02, 0x2a, 0x44, 0x0a, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x10, 0x02, 0x42, 0x0e, 0x5a, 0x0c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_infra_proto_rawDescOnce sync.Once
	file_infra_proto_rawDescData = file_infra_proto_rawDesc
)

func file_infra_proto_rawDescGZIP() []byte {
	file_infra_proto_rawDescOnce.Do(func() {
		file_infra_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_proto_rawDescData)
	})
	return file_infra_proto_rawDescData
}

var file_infra_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_infra_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_infra_proto_goTypes = []interface{}{
	(ExecutionMode)(0),           // 0: proto.ExecutionMode
	(ExecutionPriority)(0),       // 1: proto.ExecutionPriority
	(ExecutionType)(0),           // 2: proto.ExecutionType
	(PluginSource)(0),            // 3: proto.PluginSource
	(*K8SInfra)(nil),             // 4: proto.K8SInfra
	(*K8SStep)(nil),              // 5: proto.K8SStep
	(*StepRuntime)(nil),          // 6: proto.StepRuntime
	(*ResourceRequirements)(nil), // 7: proto.ResourceRequirements
	(*PluginInit)(nil),           // 8: proto.PluginInit
	(*SecurityContext)(nil),      // 9: proto.SecurityContext
	(*Package)(nil),              // 10: proto.Package
	nil,                          // 11: proto.K8SInfra.EnvEntry
	nil,                          // 12: proto.StepRuntime.EnvEntry
	(*ImagePullSecret)(nil),      // 13: proto.ImagePullSecret
	(*Resource)(nil),             // 14: proto.Resource
	(*SecretRef)(nil),            // 15: proto.SecretRef
	(*ExecutionSchedule)(nil),    // 16: proto.ExecutionSchedule
	(*durationpb.Duration)(nil),  // 17: google.protobuf.Duration
}
var file_infra_proto_depIdxs = []int32{
	5,  // 0: proto.K8SInfra.steps:type_name -> proto.K8SStep
	13, // 1: proto.K8SInfra.image_secret:type_name -> proto.ImagePullSecret
	7,  // 2: proto.K8SInfra.compute:type_name -> proto.ResourceRequirements
	11, // 3: proto.K8SInfra.env:type_name -> proto.K8SInfra.EnvEntry
	9,  // 4: proto.K8SInfra.security_context:type_name -> proto.SecurityContext
	14, // 5: proto.K8SInfra.resources:type_name -> proto.Resource
	0,  // 6: proto.K8SStep.mode:type_name -> proto.ExecutionMode
	1,  // 7: proto.K8SStep.priority:type_name -> proto.ExecutionPriority
	2,  // 8: proto.K8SStep.execution_type:type_name -> proto.ExecutionType
	6,  // 9: proto.K8SStep.runtime:type_name -> proto.StepRuntime
	15, // 10: proto.K8SStep.input_secrets:type_name -> proto.SecretRef
	3,  // 11: proto.StepRuntime.source:type_name -> proto.PluginSource
	7,  // 12: proto.StepRuntime.compute:type_name -> proto.ResourceRequirements
	8,  // 13: proto.StepRuntime.init:type_name -> proto.PluginInit
	12, // 14: proto.StepRuntime.env:type_name -> proto.StepRuntime.EnvEntry
	9,  // 15: proto.StepRuntime.security_context:type_name -> proto.SecurityContext
	16, // 16: proto.StepRuntime.schedule:type_name -> proto.ExecutionSchedule
	10, // 17: proto.StepRuntime.source_package:type_name -> proto.Package
	17, // 18: proto.ResourceRequirements.timeout:type_name -> google.protobuf.Duration
	3,  // 19: proto.Package.source_type:type_name -> proto.PluginSource
	13, // 20: proto.Package.container_registry:type_name -> proto.ImagePullSecret
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_infra_proto_init() }
func file_infra_proto_init() {
	if File_infra_proto != nil {
		return
	}
	file_image_pull_proto_init()
	file_resource_proto_init()
	file_secret_proto_init()
	file_plugin_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_infra_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SInfra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepRuntime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_infra_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Package_ContainerRegistry)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_proto_goTypes,
		DependencyIndexes: file_infra_proto_depIdxs,
		EnumInfos:         file_infra_proto_enumTypes,
		MessageInfos:      file_infra_proto_msgTypes,
	}.Build()
	File_infra_proto = out.File
	file_infra_proto_rawDesc = nil
	file_infra_proto_goTypes = nil
	file_infra_proto_depIdxs = nil
}
