// Copyright 2022 Harness Inc. All rights reserved.
// Use of this source code is governed by the PolyForm Free Trial 1.0.0 license
// that can be found in the licenses directory at the root of this repository, also available at
// https://polyformproject.org/wp-content/uploads/2020/05/PolyForm-Free-Trial-1.0.0.txt.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: secret_details.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EncryptionType int32

const (
	EncryptionType_UNKNOWN             EncryptionType = 0
	EncryptionType_NOT_SET             EncryptionType = 1
	EncryptionType_LOCAL               EncryptionType = 2
	EncryptionType_AWS_KMS             EncryptionType = 3
	EncryptionType_GCP_KMS             EncryptionType = 4
	EncryptionType_AWS_SECRETS_MANAGER EncryptionType = 5
	EncryptionType_AZURE_VAULT         EncryptionType = 6
	EncryptionType_HASHICORP_VAULT     EncryptionType = 7
	EncryptionType_GCP_SECRETS_MANAGER EncryptionType = 8
	EncryptionType_VAULT_SSH           EncryptionType = 9
	EncryptionType_CUSTOM_NG           EncryptionType = 10
)

// Enum value maps for EncryptionType.
var (
	EncryptionType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "NOT_SET",
		2:  "LOCAL",
		3:  "AWS_KMS",
		4:  "GCP_KMS",
		5:  "AWS_SECRETS_MANAGER",
		6:  "AZURE_VAULT",
		7:  "HASHICORP_VAULT",
		8:  "GCP_SECRETS_MANAGER",
		9:  "VAULT_SSH",
		10: "CUSTOM_NG",
	}
	EncryptionType_value = map[string]int32{
		"UNKNOWN":             0,
		"NOT_SET":             1,
		"LOCAL":               2,
		"AWS_KMS":             3,
		"GCP_KMS":             4,
		"AWS_SECRETS_MANAGER": 5,
		"AZURE_VAULT":         6,
		"HASHICORP_VAULT":     7,
		"GCP_SECRETS_MANAGER": 8,
		"VAULT_SSH":           9,
		"CUSTOM_NG":           10,
	}
)

func (x EncryptionType) Enum() *EncryptionType {
	p := new(EncryptionType)
	*p = x
	return p
}

func (x EncryptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncryptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_secret_details_proto_enumTypes[0].Descriptor()
}

func (EncryptionType) Type() protoreflect.EnumType {
	return &file_secret_details_proto_enumTypes[0]
}

func (x EncryptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncryptionType.Descriptor instead.
func (EncryptionType) EnumDescriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{0}
}

type SecretManagerType int32

const (
	SecretManagerType_UNKNOWN_SM SecretManagerType = 0
	SecretManagerType_SM_NOT_SET SecretManagerType = 1
	SecretManagerType_KMS        SecretManagerType = 2
	SecretManagerType_VAULT      SecretManagerType = 3
	SecretManagerType_CUSTOM     SecretManagerType = 4
	SecretManagerType_SSH        SecretManagerType = 5
)

// Enum value maps for SecretManagerType.
var (
	SecretManagerType_name = map[int32]string{
		0: "UNKNOWN_SM",
		1: "SM_NOT_SET",
		2: "KMS",
		3: "VAULT",
		4: "CUSTOM",
		5: "SSH",
	}
	SecretManagerType_value = map[string]int32{
		"UNKNOWN_SM": 0,
		"SM_NOT_SET": 1,
		"KMS":        2,
		"VAULT":      3,
		"CUSTOM":     4,
		"SSH":        5,
	}
)

func (x SecretManagerType) Enum() *SecretManagerType {
	p := new(SecretManagerType)
	*p = x
	return p
}

func (x SecretManagerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecretManagerType) Descriptor() protoreflect.EnumDescriptor {
	return file_secret_details_proto_enumTypes[1].Descriptor()
}

func (SecretManagerType) Type() protoreflect.EnumType {
	return &file_secret_details_proto_enumTypes[1]
}

func (x SecretManagerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecretManagerType.Descriptor instead.
func (SecretManagerType) EnumDescriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{1}
}

type AzureVaultConfig_AzureEnvironmentType int32

const (
	AzureVaultConfig_AZURE               AzureVaultConfig_AzureEnvironmentType = 0
	AzureVaultConfig_AZURE_US_GOVERNMENT AzureVaultConfig_AzureEnvironmentType = 1
)

// Enum value maps for AzureVaultConfig_AzureEnvironmentType.
var (
	AzureVaultConfig_AzureEnvironmentType_name = map[int32]string{
		0: "AZURE",
		1: "AZURE_US_GOVERNMENT",
	}
	AzureVaultConfig_AzureEnvironmentType_value = map[string]int32{
		"AZURE":               0,
		"AZURE_US_GOVERNMENT": 1,
	}
)

func (x AzureVaultConfig_AzureEnvironmentType) Enum() *AzureVaultConfig_AzureEnvironmentType {
	p := new(AzureVaultConfig_AzureEnvironmentType)
	*p = x
	return p
}

func (x AzureVaultConfig_AzureEnvironmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AzureVaultConfig_AzureEnvironmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_secret_details_proto_enumTypes[2].Descriptor()
}

func (AzureVaultConfig_AzureEnvironmentType) Type() protoreflect.EnumType {
	return &file_secret_details_proto_enumTypes[2]
}

func (x AzureVaultConfig_AzureEnvironmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AzureVaultConfig_AzureEnvironmentType.Descriptor instead.
func (AzureVaultConfig_AzureEnvironmentType) EnumDescriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{4, 0}
}

type AzureVaultConfig_AzureManagedIdentityType int32

const (
	AzureVaultConfig_SYSTEM_ASSIGNED_MANAGED_IDENTITY AzureVaultConfig_AzureManagedIdentityType = 0
	AzureVaultConfig_USER_ASSIGNED_MANAGED_IDENTITY   AzureVaultConfig_AzureManagedIdentityType = 1
)

// Enum value maps for AzureVaultConfig_AzureManagedIdentityType.
var (
	AzureVaultConfig_AzureManagedIdentityType_name = map[int32]string{
		0: "SYSTEM_ASSIGNED_MANAGED_IDENTITY",
		1: "USER_ASSIGNED_MANAGED_IDENTITY",
	}
	AzureVaultConfig_AzureManagedIdentityType_value = map[string]int32{
		"SYSTEM_ASSIGNED_MANAGED_IDENTITY": 0,
		"USER_ASSIGNED_MANAGED_IDENTITY":   1,
	}
)

func (x AzureVaultConfig_AzureManagedIdentityType) Enum() *AzureVaultConfig_AzureManagedIdentityType {
	p := new(AzureVaultConfig_AzureManagedIdentityType)
	*p = x
	return p
}

func (x AzureVaultConfig_AzureManagedIdentityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AzureVaultConfig_AzureManagedIdentityType) Descriptor() protoreflect.EnumDescriptor {
	return file_secret_details_proto_enumTypes[3].Descriptor()
}

func (AzureVaultConfig_AzureManagedIdentityType) Type() protoreflect.EnumType {
	return &file_secret_details_proto_enumTypes[3]
}

func (x AzureVaultConfig_AzureManagedIdentityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AzureVaultConfig_AzureManagedIdentityType.Descriptor instead.
func (AzureVaultConfig_AzureManagedIdentityType) EnumDescriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{4, 1}
}

type SSHKey_SSHAuthScheme int32

const (
	SSHKey_SSH      SSHKey_SSHAuthScheme = 0
	SSHKey_KERBEROS SSHKey_SSHAuthScheme = 1
)

// Enum value maps for SSHKey_SSHAuthScheme.
var (
	SSHKey_SSHAuthScheme_name = map[int32]string{
		0: "SSH",
		1: "KERBEROS",
	}
	SSHKey_SSHAuthScheme_value = map[string]int32{
		"SSH":      0,
		"KERBEROS": 1,
	}
)

func (x SSHKey_SSHAuthScheme) Enum() *SSHKey_SSHAuthScheme {
	p := new(SSHKey_SSHAuthScheme)
	*p = x
	return p
}

func (x SSHKey_SSHAuthScheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSHKey_SSHAuthScheme) Descriptor() protoreflect.EnumDescriptor {
	return file_secret_details_proto_enumTypes[4].Descriptor()
}

func (SSHKey_SSHAuthScheme) Type() protoreflect.EnumType {
	return &file_secret_details_proto_enumTypes[4]
}

func (x SSHKey_SSHAuthScheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSHKey_SSHAuthScheme.Descriptor instead.
func (SSHKey_SSHAuthScheme) EnumDescriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{14, 0}
}

type SSHConfig_SSHCredentialType int32

const (
	SSHConfig_PASSWORD      SSHConfig_SSHCredentialType = 0
	SSHConfig_KEY_PATH      SSHConfig_SSHCredentialType = 1
	SSHConfig_KEY_REFERENCE SSHConfig_SSHCredentialType = 2
)

// Enum value maps for SSHConfig_SSHCredentialType.
var (
	SSHConfig_SSHCredentialType_name = map[int32]string{
		0: "PASSWORD",
		1: "KEY_PATH",
		2: "KEY_REFERENCE",
	}
	SSHConfig_SSHCredentialType_value = map[string]int32{
		"PASSWORD":      0,
		"KEY_PATH":      1,
		"KEY_REFERENCE": 2,
	}
)

func (x SSHConfig_SSHCredentialType) Enum() *SSHConfig_SSHCredentialType {
	p := new(SSHConfig_SSHCredentialType)
	*p = x
	return p
}

func (x SSHConfig_SSHCredentialType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSHConfig_SSHCredentialType) Descriptor() protoreflect.EnumDescriptor {
	return file_secret_details_proto_enumTypes[5].Descriptor()
}

func (SSHConfig_SSHCredentialType) Type() protoreflect.EnumType {
	return &file_secret_details_proto_enumTypes[5]
}

func (x SSHConfig_SSHCredentialType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSHConfig_SSHCredentialType.Descriptor instead.
func (SSHConfig_SSHCredentialType) EnumDescriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{15, 0}
}

type KerberosConfig_TGTGenerationMethod int32

const (
	KerberosConfig_KEY_TAB_FILE_PATH KerberosConfig_TGTGenerationMethod = 0
	KerberosConfig_PASSWORD          KerberosConfig_TGTGenerationMethod = 1
)

// Enum value maps for KerberosConfig_TGTGenerationMethod.
var (
	KerberosConfig_TGTGenerationMethod_name = map[int32]string{
		0: "KEY_TAB_FILE_PATH",
		1: "PASSWORD",
	}
	KerberosConfig_TGTGenerationMethod_value = map[string]int32{
		"KEY_TAB_FILE_PATH": 0,
		"PASSWORD":          1,
	}
)

func (x KerberosConfig_TGTGenerationMethod) Enum() *KerberosConfig_TGTGenerationMethod {
	p := new(KerberosConfig_TGTGenerationMethod)
	*p = x
	return p
}

func (x KerberosConfig_TGTGenerationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KerberosConfig_TGTGenerationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_secret_details_proto_enumTypes[6].Descriptor()
}

func (KerberosConfig_TGTGenerationMethod) Type() protoreflect.EnumType {
	return &file_secret_details_proto_enumTypes[6]
}

func (x KerberosConfig_TGTGenerationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KerberosConfig_TGTGenerationMethod.Descriptor instead.
func (KerberosConfig_TGTGenerationMethod) EnumDescriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{19, 0}
}

type SecretDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedData *EncryptedRecordForDelegateDecryption `protobuf:"bytes,1,opt,name=encrypted_data,json=encryptedData,proto3" json:"encrypted_data,omitempty"`
	Config        *EncryptionConfig                     `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *SecretDetail) Reset() {
	*x = SecretDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretDetail) ProtoMessage() {}

func (x *SecretDetail) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretDetail.ProtoReflect.Descriptor instead.
func (*SecretDetail) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{0}
}

func (x *SecretDetail) GetEncryptedData() *EncryptedRecordForDelegateDecryption {
	if x != nil {
		return x.EncryptedData
	}
	return nil
}

func (x *SecretDetail) GetConfig() *EncryptionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// Data model of encrypted records used by decryption module to decrypt
type EncryptedRecordForDelegateDecryption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                 string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path                 string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Params               []*EncryptedDataParams `protobuf:"bytes,4,rep,name=params,proto3" json:"params,omitempty"`
	EncryptionKey        string                 `protobuf:"bytes,5,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty"`
	EncryptedValue       []byte                 `protobuf:"bytes,6,opt,name=encrypted_value,json=encryptedValue,proto3" json:"encrypted_value,omitempty"`
	KmsId                string                 `protobuf:"bytes,7,opt,name=kms_id,json=kmsId,proto3" json:"kms_id,omitempty"`
	EncryptionType       EncryptionType         `protobuf:"varint,8,opt,name=encryption_type,json=encryptionType,proto3,enum=proto.EncryptionType" json:"encryption_type,omitempty"`
	BackupEncryptedValue []byte                 `protobuf:"bytes,9,opt,name=backup_encrypted_value,json=backupEncryptedValue,proto3" json:"backup_encrypted_value,omitempty"`
	BackupEncryptionKey  string                 `protobuf:"bytes,10,opt,name=backup_encryption_key,json=backupEncryptionKey,proto3" json:"backup_encryption_key,omitempty"`
	BackupKmsId          string                 `protobuf:"bytes,11,opt,name=backup_kms_id,json=backupKmsId,proto3" json:"backup_kms_id,omitempty"`
	BackupEncryptionType EncryptionType         `protobuf:"varint,12,opt,name=backup_encryption_type,json=backupEncryptionType,proto3,enum=proto.EncryptionType" json:"backup_encryption_type,omitempty"`
	Base64Encoded        bool                   `protobuf:"varint,13,opt,name=base64_encoded,json=base64Encoded,proto3" json:"base64_encoded,omitempty"`
	AdditionalMetadata   map[string]string      `protobuf:"bytes,14,rep,name=additional_metadata,json=additionalMetadata,proto3" json:"additional_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EncryptedRecordForDelegateDecryption) Reset() {
	*x = EncryptedRecordForDelegateDecryption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedRecordForDelegateDecryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedRecordForDelegateDecryption) ProtoMessage() {}

func (x *EncryptedRecordForDelegateDecryption) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedRecordForDelegateDecryption.ProtoReflect.Descriptor instead.
func (*EncryptedRecordForDelegateDecryption) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{1}
}

func (x *EncryptedRecordForDelegateDecryption) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *EncryptedRecordForDelegateDecryption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EncryptedRecordForDelegateDecryption) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *EncryptedRecordForDelegateDecryption) GetParams() []*EncryptedDataParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *EncryptedRecordForDelegateDecryption) GetEncryptionKey() string {
	if x != nil {
		return x.EncryptionKey
	}
	return ""
}

func (x *EncryptedRecordForDelegateDecryption) GetEncryptedValue() []byte {
	if x != nil {
		return x.EncryptedValue
	}
	return nil
}

func (x *EncryptedRecordForDelegateDecryption) GetKmsId() string {
	if x != nil {
		return x.KmsId
	}
	return ""
}

func (x *EncryptedRecordForDelegateDecryption) GetEncryptionType() EncryptionType {
	if x != nil {
		return x.EncryptionType
	}
	return EncryptionType_UNKNOWN
}

func (x *EncryptedRecordForDelegateDecryption) GetBackupEncryptedValue() []byte {
	if x != nil {
		return x.BackupEncryptedValue
	}
	return nil
}

func (x *EncryptedRecordForDelegateDecryption) GetBackupEncryptionKey() string {
	if x != nil {
		return x.BackupEncryptionKey
	}
	return ""
}

func (x *EncryptedRecordForDelegateDecryption) GetBackupKmsId() string {
	if x != nil {
		return x.BackupKmsId
	}
	return ""
}

func (x *EncryptedRecordForDelegateDecryption) GetBackupEncryptionType() EncryptionType {
	if x != nil {
		return x.BackupEncryptionType
	}
	return EncryptionType_UNKNOWN
}

func (x *EncryptedRecordForDelegateDecryption) GetBase64Encoded() bool {
	if x != nil {
		return x.Base64Encoded
	}
	return false
}

func (x *EncryptedRecordForDelegateDecryption) GetAdditionalMetadata() map[string]string {
	if x != nil {
		return x.AdditionalMetadata
	}
	return nil
}

type EncryptedDataParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EncryptedDataParams) Reset() {
	*x = EncryptedDataParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedDataParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedDataParams) ProtoMessage() {}

func (x *EncryptedDataParams) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedDataParams.ProtoReflect.Descriptor instead.
func (*EncryptedDataParams) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{2}
}

func (x *EncryptedDataParams) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EncryptedDataParams) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EncryptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                 string            `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AccountId            string            `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Name                 string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	IsGlobalKms          bool              `protobuf:"varint,4,opt,name=is_global_kms,json=isGlobalKms,proto3" json:"is_global_kms,omitempty"`
	EncryptionType       EncryptionType    `protobuf:"varint,5,opt,name=encryption_type,json=encryptionType,proto3,enum=proto.EncryptionType" json:"encryption_type,omitempty"`
	SecretManagerType    SecretManagerType `protobuf:"varint,6,opt,name=secret_manager_type,json=secretManagerType,proto3,enum=proto.SecretManagerType" json:"secret_manager_type,omitempty"`
	EncryptionServiceUrl string            `protobuf:"bytes,7,opt,name=encryption_service_url,json=encryptionServiceUrl,proto3" json:"encryption_service_url,omitempty"`
	// Types that are assignable to EncryptionServiceConfig:
	//
	//	*EncryptionConfig_AzureVaultConfig
	//	*EncryptionConfig_VaultConfig
	//	*EncryptionConfig_GcpSecretManagerConfig
	//	*EncryptionConfig_AwsSecretManagerConfig
	//	*EncryptionConfig_GcpKmsConfig
	//	*EncryptionConfig_AwsKmsConfig
	//	*EncryptionConfig_CustomSecretManagerConfig
	EncryptionServiceConfig isEncryptionConfig_EncryptionServiceConfig `protobuf_oneof:"encryption_service_config"`
}

func (x *EncryptionConfig) Reset() {
	*x = EncryptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionConfig) ProtoMessage() {}

func (x *EncryptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionConfig.ProtoReflect.Descriptor instead.
func (*EncryptionConfig) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{3}
}

func (x *EncryptionConfig) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *EncryptionConfig) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *EncryptionConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EncryptionConfig) GetIsGlobalKms() bool {
	if x != nil {
		return x.IsGlobalKms
	}
	return false
}

func (x *EncryptionConfig) GetEncryptionType() EncryptionType {
	if x != nil {
		return x.EncryptionType
	}
	return EncryptionType_UNKNOWN
}

func (x *EncryptionConfig) GetSecretManagerType() SecretManagerType {
	if x != nil {
		return x.SecretManagerType
	}
	return SecretManagerType_UNKNOWN_SM
}

func (x *EncryptionConfig) GetEncryptionServiceUrl() string {
	if x != nil {
		return x.EncryptionServiceUrl
	}
	return ""
}

func (m *EncryptionConfig) GetEncryptionServiceConfig() isEncryptionConfig_EncryptionServiceConfig {
	if m != nil {
		return m.EncryptionServiceConfig
	}
	return nil
}

func (x *EncryptionConfig) GetAzureVaultConfig() *AzureVaultConfig {
	if x, ok := x.GetEncryptionServiceConfig().(*EncryptionConfig_AzureVaultConfig); ok {
		return x.AzureVaultConfig
	}
	return nil
}

func (x *EncryptionConfig) GetVaultConfig() *HashicorpVaultConfig {
	if x, ok := x.GetEncryptionServiceConfig().(*EncryptionConfig_VaultConfig); ok {
		return x.VaultConfig
	}
	return nil
}

func (x *EncryptionConfig) GetGcpSecretManagerConfig() *GcpSecretsManagerConfig {
	if x, ok := x.GetEncryptionServiceConfig().(*EncryptionConfig_GcpSecretManagerConfig); ok {
		return x.GcpSecretManagerConfig
	}
	return nil
}

func (x *EncryptionConfig) GetAwsSecretManagerConfig() *AwsSecretsManagerConfig {
	if x, ok := x.GetEncryptionServiceConfig().(*EncryptionConfig_AwsSecretManagerConfig); ok {
		return x.AwsSecretManagerConfig
	}
	return nil
}

func (x *EncryptionConfig) GetGcpKmsConfig() *GcpKmsConfig {
	if x, ok := x.GetEncryptionServiceConfig().(*EncryptionConfig_GcpKmsConfig); ok {
		return x.GcpKmsConfig
	}
	return nil
}

func (x *EncryptionConfig) GetAwsKmsConfig() *AwsKmsConfig {
	if x, ok := x.GetEncryptionServiceConfig().(*EncryptionConfig_AwsKmsConfig); ok {
		return x.AwsKmsConfig
	}
	return nil
}

func (x *EncryptionConfig) GetCustomSecretManagerConfig() *CustomSecretNGManagerConfig {
	if x, ok := x.GetEncryptionServiceConfig().(*EncryptionConfig_CustomSecretManagerConfig); ok {
		return x.CustomSecretManagerConfig
	}
	return nil
}

type isEncryptionConfig_EncryptionServiceConfig interface {
	isEncryptionConfig_EncryptionServiceConfig()
}

type EncryptionConfig_AzureVaultConfig struct {
	AzureVaultConfig *AzureVaultConfig `protobuf:"bytes,8,opt,name=azure_vault_config,json=azureVaultConfig,proto3,oneof"`
}

type EncryptionConfig_VaultConfig struct {
	VaultConfig *HashicorpVaultConfig `protobuf:"bytes,9,opt,name=vault_config,json=vaultConfig,proto3,oneof"`
}

type EncryptionConfig_GcpSecretManagerConfig struct {
	GcpSecretManagerConfig *GcpSecretsManagerConfig `protobuf:"bytes,10,opt,name=gcp_secret_manager_config,json=gcpSecretManagerConfig,proto3,oneof"`
}

type EncryptionConfig_AwsSecretManagerConfig struct {
	AwsSecretManagerConfig *AwsSecretsManagerConfig `protobuf:"bytes,11,opt,name=aws_secret_manager_config,json=awsSecretManagerConfig,proto3,oneof"`
}

type EncryptionConfig_GcpKmsConfig struct {
	GcpKmsConfig *GcpKmsConfig `protobuf:"bytes,12,opt,name=gcp_kms_config,json=gcpKmsConfig,proto3,oneof"`
}

type EncryptionConfig_AwsKmsConfig struct {
	AwsKmsConfig *AwsKmsConfig `protobuf:"bytes,13,opt,name=aws_kms_config,json=awsKmsConfig,proto3,oneof"`
}

type EncryptionConfig_CustomSecretManagerConfig struct {
	CustomSecretManagerConfig *CustomSecretNGManagerConfig `protobuf:"bytes,14,opt,name=custom_secret_manager_config,json=customSecretManagerConfig,proto3,oneof"`
}

func (*EncryptionConfig_AzureVaultConfig) isEncryptionConfig_EncryptionServiceConfig() {}

func (*EncryptionConfig_VaultConfig) isEncryptionConfig_EncryptionServiceConfig() {}

func (*EncryptionConfig_GcpSecretManagerConfig) isEncryptionConfig_EncryptionServiceConfig() {}

func (*EncryptionConfig_AwsSecretManagerConfig) isEncryptionConfig_EncryptionServiceConfig() {}

func (*EncryptionConfig_GcpKmsConfig) isEncryptionConfig_EncryptionServiceConfig() {}

func (*EncryptionConfig_AwsKmsConfig) isEncryptionConfig_EncryptionServiceConfig() {}

func (*EncryptionConfig_CustomSecretManagerConfig) isEncryptionConfig_EncryptionServiceConfig() {}

// Configurations for each type of vault config
type AzureVaultConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId                 string                                    `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	SecretKey                string                                    `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	TenantId                 string                                    `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	VaultName                string                                    `protobuf:"bytes,4,opt,name=vault_name,json=vaultName,proto3" json:"vault_name,omitempty"`
	Subscription             string                                    `protobuf:"bytes,5,opt,name=subscription,proto3" json:"subscription,omitempty"`
	UseManagedIdentity       bool                                      `protobuf:"varint,6,opt,name=use_managed_identity,json=useManagedIdentity,proto3" json:"use_managed_identity,omitempty"`
	ManagedClientId          string                                    `protobuf:"bytes,7,opt,name=managed_client_id,json=managedClientId,proto3" json:"managed_client_id,omitempty"`
	AzureEnvironmentType     AzureVaultConfig_AzureEnvironmentType     `protobuf:"varint,8,opt,name=azure_environment_type,json=azureEnvironmentType,proto3,enum=proto.AzureVaultConfig_AzureEnvironmentType" json:"azure_environment_type,omitempty"`
	AzureManagedIdentityType AzureVaultConfig_AzureManagedIdentityType `protobuf:"varint,9,opt,name=azure_managed_identity_type,json=azureManagedIdentityType,proto3,enum=proto.AzureVaultConfig_AzureManagedIdentityType" json:"azure_managed_identity_type,omitempty"`
}

func (x *AzureVaultConfig) Reset() {
	*x = AzureVaultConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureVaultConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureVaultConfig) ProtoMessage() {}

func (x *AzureVaultConfig) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureVaultConfig.ProtoReflect.Descriptor instead.
func (*AzureVaultConfig) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{4}
}

func (x *AzureVaultConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AzureVaultConfig) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *AzureVaultConfig) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *AzureVaultConfig) GetVaultName() string {
	if x != nil {
		return x.VaultName
	}
	return ""
}

func (x *AzureVaultConfig) GetSubscription() string {
	if x != nil {
		return x.Subscription
	}
	return ""
}

func (x *AzureVaultConfig) GetUseManagedIdentity() bool {
	if x != nil {
		return x.UseManagedIdentity
	}
	return false
}

func (x *AzureVaultConfig) GetManagedClientId() string {
	if x != nil {
		return x.ManagedClientId
	}
	return ""
}

func (x *AzureVaultConfig) GetAzureEnvironmentType() AzureVaultConfig_AzureEnvironmentType {
	if x != nil {
		return x.AzureEnvironmentType
	}
	return AzureVaultConfig_AZURE
}

func (x *AzureVaultConfig) GetAzureManagedIdentityType() AzureVaultConfig_AzureManagedIdentityType {
	if x != nil {
		return x.AzureManagedIdentityType
	}
	return AzureVaultConfig_SYSTEM_ASSIGNED_MANAGED_IDENTITY
}

type HashicorpVaultConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthToken               string `protobuf:"bytes,1,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	SecretEngineName        string `protobuf:"bytes,2,opt,name=secret_engine_name,json=secretEngineName,proto3" json:"secret_engine_name,omitempty"`
	SecretEngineVersion     int32  `protobuf:"varint,3,opt,name=secret_engine_version,json=secretEngineVersion,proto3" json:"secret_engine_version,omitempty"`
	Namespace               string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	BasePath                string `protobuf:"bytes,5,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`
	IsReadOnly              bool   `protobuf:"varint,6,opt,name=is_read_only,json=isReadOnly,proto3" json:"is_read_only,omitempty"`
	AppRoleId               string `protobuf:"bytes,7,opt,name=app_role_id,json=appRoleId,proto3" json:"app_role_id,omitempty"`
	SecretId                string `protobuf:"bytes,8,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
	UseVaultAgent           bool   `protobuf:"varint,9,opt,name=use_vault_agent,json=useVaultAgent,proto3" json:"use_vault_agent,omitempty"`
	SinkPath                string `protobuf:"bytes,10,opt,name=sink_path,json=sinkPath,proto3" json:"sink_path,omitempty"`
	UseAwsIam               bool   `protobuf:"varint,11,opt,name=use_aws_iam,json=useAwsIam,proto3" json:"use_aws_iam,omitempty"`
	VaultAwsIamRole         string `protobuf:"bytes,12,opt,name=vault_aws_iam_role,json=vaultAwsIamRole,proto3" json:"vault_aws_iam_role,omitempty"`
	AwsRegion               string `protobuf:"bytes,13,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
	XVaultAwsIamServerId    string `protobuf:"bytes,14,opt,name=x_vault_aws_iam_server_id,json=xVaultAwsIamServerId,proto3" json:"x_vault_aws_iam_server_id,omitempty"`
	UseK8SAuth              bool   `protobuf:"varint,15,opt,name=use_k8s_auth,json=useK8sAuth,proto3" json:"use_k8s_auth,omitempty"`
	VaultK8SAuthRole        string `protobuf:"bytes,16,opt,name=vault_k8s_auth_role,json=vaultK8sAuthRole,proto3" json:"vault_k8s_auth_role,omitempty"`
	ServiceAccountTokenPath string `protobuf:"bytes,17,opt,name=service_account_token_path,json=serviceAccountTokenPath,proto3" json:"service_account_token_path,omitempty"`
	K8SAuthEndpoint         string `protobuf:"bytes,18,opt,name=k8s_auth_endpoint,json=k8sAuthEndpoint,proto3" json:"k8s_auth_endpoint,omitempty"`
}

func (x *HashicorpVaultConfig) Reset() {
	*x = HashicorpVaultConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashicorpVaultConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashicorpVaultConfig) ProtoMessage() {}

func (x *HashicorpVaultConfig) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashicorpVaultConfig.ProtoReflect.Descriptor instead.
func (*HashicorpVaultConfig) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{5}
}

func (x *HashicorpVaultConfig) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *HashicorpVaultConfig) GetSecretEngineName() string {
	if x != nil {
		return x.SecretEngineName
	}
	return ""
}

func (x *HashicorpVaultConfig) GetSecretEngineVersion() int32 {
	if x != nil {
		return x.SecretEngineVersion
	}
	return 0
}

func (x *HashicorpVaultConfig) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *HashicorpVaultConfig) GetBasePath() string {
	if x != nil {
		return x.BasePath
	}
	return ""
}

func (x *HashicorpVaultConfig) GetIsReadOnly() bool {
	if x != nil {
		return x.IsReadOnly
	}
	return false
}

func (x *HashicorpVaultConfig) GetAppRoleId() string {
	if x != nil {
		return x.AppRoleId
	}
	return ""
}

func (x *HashicorpVaultConfig) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

func (x *HashicorpVaultConfig) GetUseVaultAgent() bool {
	if x != nil {
		return x.UseVaultAgent
	}
	return false
}

func (x *HashicorpVaultConfig) GetSinkPath() string {
	if x != nil {
		return x.SinkPath
	}
	return ""
}

func (x *HashicorpVaultConfig) GetUseAwsIam() bool {
	if x != nil {
		return x.UseAwsIam
	}
	return false
}

func (x *HashicorpVaultConfig) GetVaultAwsIamRole() string {
	if x != nil {
		return x.VaultAwsIamRole
	}
	return ""
}

func (x *HashicorpVaultConfig) GetAwsRegion() string {
	if x != nil {
		return x.AwsRegion
	}
	return ""
}

func (x *HashicorpVaultConfig) GetXVaultAwsIamServerId() string {
	if x != nil {
		return x.XVaultAwsIamServerId
	}
	return ""
}

func (x *HashicorpVaultConfig) GetUseK8SAuth() bool {
	if x != nil {
		return x.UseK8SAuth
	}
	return false
}

func (x *HashicorpVaultConfig) GetVaultK8SAuthRole() string {
	if x != nil {
		return x.VaultK8SAuthRole
	}
	return ""
}

func (x *HashicorpVaultConfig) GetServiceAccountTokenPath() string {
	if x != nil {
		return x.ServiceAccountTokenPath
	}
	return ""
}

func (x *HashicorpVaultConfig) GetK8SAuthEndpoint() string {
	if x != nil {
		return x.K8SAuthEndpoint
	}
	return ""
}

type GcpSecretsManagerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GcpServiceAccountCredentials []byte `protobuf:"bytes,1,opt,name=gcp_service_account_credentials,json=gcpServiceAccountCredentials,proto3" json:"gcp_service_account_credentials,omitempty"`
	AssumeCredentialsOnDelegate  bool   `protobuf:"varint,2,opt,name=assume_credentials_on_delegate,json=assumeCredentialsOnDelegate,proto3" json:"assume_credentials_on_delegate,omitempty"`
}

func (x *GcpSecretsManagerConfig) Reset() {
	*x = GcpSecretsManagerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcpSecretsManagerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpSecretsManagerConfig) ProtoMessage() {}

func (x *GcpSecretsManagerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpSecretsManagerConfig.ProtoReflect.Descriptor instead.
func (*GcpSecretsManagerConfig) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{6}
}

func (x *GcpSecretsManagerConfig) GetGcpServiceAccountCredentials() []byte {
	if x != nil {
		return x.GcpServiceAccountCredentials
	}
	return nil
}

func (x *GcpSecretsManagerConfig) GetAssumeCredentialsOnDelegate() bool {
	if x != nil {
		return x.AssumeCredentialsOnDelegate
	}
	return false
}

type AwsSecretsManagerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKey               string `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey               string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	Region                  string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	SecretNamePrefix        string `protobuf:"bytes,4,opt,name=secret_name_prefix,json=secretNamePrefix,proto3" json:"secret_name_prefix,omitempty"`
	AssumeIamRoleOnDelegate bool   `protobuf:"varint,5,opt,name=assume_iam_role_on_delegate,json=assumeIamRoleOnDelegate,proto3" json:"assume_iam_role_on_delegate,omitempty"`
	AssumeStsRoleOnDelegate bool   `protobuf:"varint,6,opt,name=assume_sts_role_on_delegate,json=assumeStsRoleOnDelegate,proto3" json:"assume_sts_role_on_delegate,omitempty"`
	AssumeStsRoleDuration   int32  `protobuf:"varint,7,opt,name=assume_sts_role_duration,json=assumeStsRoleDuration,proto3" json:"assume_sts_role_duration,omitempty"`
	RoleArn                 string `protobuf:"bytes,8,opt,name=role_arn,json=roleArn,proto3" json:"role_arn,omitempty"`
	ExternalName            string `protobuf:"bytes,9,opt,name=external_name,json=externalName,proto3" json:"external_name,omitempty"`
}

func (x *AwsSecretsManagerConfig) Reset() {
	*x = AwsSecretsManagerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsSecretsManagerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsSecretsManagerConfig) ProtoMessage() {}

func (x *AwsSecretsManagerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsSecretsManagerConfig.ProtoReflect.Descriptor instead.
func (*AwsSecretsManagerConfig) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{7}
}

func (x *AwsSecretsManagerConfig) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *AwsSecretsManagerConfig) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *AwsSecretsManagerConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AwsSecretsManagerConfig) GetSecretNamePrefix() string {
	if x != nil {
		return x.SecretNamePrefix
	}
	return ""
}

func (x *AwsSecretsManagerConfig) GetAssumeIamRoleOnDelegate() bool {
	if x != nil {
		return x.AssumeIamRoleOnDelegate
	}
	return false
}

func (x *AwsSecretsManagerConfig) GetAssumeStsRoleOnDelegate() bool {
	if x != nil {
		return x.AssumeStsRoleOnDelegate
	}
	return false
}

func (x *AwsSecretsManagerConfig) GetAssumeStsRoleDuration() int32 {
	if x != nil {
		return x.AssumeStsRoleDuration
	}
	return 0
}

func (x *AwsSecretsManagerConfig) GetRoleArn() string {
	if x != nil {
		return x.RoleArn
	}
	return ""
}

func (x *AwsSecretsManagerConfig) GetExternalName() string {
	if x != nil {
		return x.ExternalName
	}
	return ""
}

// Configurations for each type of kms config
type GcpKmsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId                    string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Region                       string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	KeyRing                      string `protobuf:"bytes,3,opt,name=key_ring,json=keyRing,proto3" json:"key_ring,omitempty"`
	KeyName                      string `protobuf:"bytes,4,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
	GcpServiceAccountCredentials []byte `protobuf:"bytes,5,opt,name=gcp_service_account_credentials,json=gcpServiceAccountCredentials,proto3" json:"gcp_service_account_credentials,omitempty"`
}

func (x *GcpKmsConfig) Reset() {
	*x = GcpKmsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcpKmsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpKmsConfig) ProtoMessage() {}

func (x *GcpKmsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpKmsConfig.ProtoReflect.Descriptor instead.
func (*GcpKmsConfig) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{8}
}

func (x *GcpKmsConfig) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GcpKmsConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GcpKmsConfig) GetKeyRing() string {
	if x != nil {
		return x.KeyRing
	}
	return ""
}

func (x *GcpKmsConfig) GetKeyName() string {
	if x != nil {
		return x.KeyName
	}
	return ""
}

func (x *GcpKmsConfig) GetGcpServiceAccountCredentials() []byte {
	if x != nil {
		return x.GcpServiceAccountCredentials
	}
	return nil
}

type AwsKmsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKey               string `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey               string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	KmsArn                  string `protobuf:"bytes,3,opt,name=kms_arn,json=kmsArn,proto3" json:"kms_arn,omitempty"`
	Region                  string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	AssumeIamRoleOnDelegate bool   `protobuf:"varint,5,opt,name=assume_iam_role_on_delegate,json=assumeIamRoleOnDelegate,proto3" json:"assume_iam_role_on_delegate,omitempty"`
	AssumeStsRoleOnDelegate bool   `protobuf:"varint,6,opt,name=assume_sts_role_on_delegate,json=assumeStsRoleOnDelegate,proto3" json:"assume_sts_role_on_delegate,omitempty"`
	AssumeStsRoleDuration   int32  `protobuf:"varint,7,opt,name=assume_sts_role_duration,json=assumeStsRoleDuration,proto3" json:"assume_sts_role_duration,omitempty"`
	RoleArn                 string `protobuf:"bytes,8,opt,name=role_arn,json=roleArn,proto3" json:"role_arn,omitempty"`
	ExternalName            string `protobuf:"bytes,9,opt,name=external_name,json=externalName,proto3" json:"external_name,omitempty"`
}

func (x *AwsKmsConfig) Reset() {
	*x = AwsKmsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsKmsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsKmsConfig) ProtoMessage() {}

func (x *AwsKmsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsKmsConfig.ProtoReflect.Descriptor instead.
func (*AwsKmsConfig) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{9}
}

func (x *AwsKmsConfig) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *AwsKmsConfig) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *AwsKmsConfig) GetKmsArn() string {
	if x != nil {
		return x.KmsArn
	}
	return ""
}

func (x *AwsKmsConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AwsKmsConfig) GetAssumeIamRoleOnDelegate() bool {
	if x != nil {
		return x.AssumeIamRoleOnDelegate
	}
	return false
}

func (x *AwsKmsConfig) GetAssumeStsRoleOnDelegate() bool {
	if x != nil {
		return x.AssumeStsRoleOnDelegate
	}
	return false
}

func (x *AwsKmsConfig) GetAssumeStsRoleDuration() int32 {
	if x != nil {
		return x.AssumeStsRoleDuration
	}
	return 0
}

func (x *AwsKmsConfig) GetRoleArn() string {
	if x != nil {
		return x.RoleArn
	}
	return ""
}

func (x *AwsKmsConfig) GetExternalName() string {
	if x != nil {
		return x.ExternalName
	}
	return ""
}

// Configurations for custom ng secret manager
type CustomSecretNGManagerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Script               string              `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
	IsOnDelegate         bool                `protobuf:"varint,2,opt,name=is_on_delegate,json=isOnDelegate,proto3" json:"is_on_delegate,omitempty"`
	WorkingDirectory     string              `protobuf:"bytes,3,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"`
	Host                 string              `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	ConnectorRef         string              `protobuf:"bytes,5,opt,name=connector_ref,json=connectorRef,proto3" json:"connector_ref,omitempty"`
	SshKey               *SSHKey             `protobuf:"bytes,6,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	TemplateLinkConfig   *TemplateLinkConfig `protobuf:"bytes,7,opt,name=template_link_config,json=templateLinkConfig,proto3" json:"template_link_config,omitempty"`
	SshEncryptionDetails []*SecretDetail     `protobuf:"bytes,8,rep,name=ssh_encryption_details,json=sshEncryptionDetails,proto3" json:"ssh_encryption_details,omitempty"`
}

func (x *CustomSecretNGManagerConfig) Reset() {
	*x = CustomSecretNGManagerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomSecretNGManagerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomSecretNGManagerConfig) ProtoMessage() {}

func (x *CustomSecretNGManagerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomSecretNGManagerConfig.ProtoReflect.Descriptor instead.
func (*CustomSecretNGManagerConfig) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{10}
}

func (x *CustomSecretNGManagerConfig) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *CustomSecretNGManagerConfig) GetIsOnDelegate() bool {
	if x != nil {
		return x.IsOnDelegate
	}
	return false
}

func (x *CustomSecretNGManagerConfig) GetWorkingDirectory() string {
	if x != nil {
		return x.WorkingDirectory
	}
	return ""
}

func (x *CustomSecretNGManagerConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *CustomSecretNGManagerConfig) GetConnectorRef() string {
	if x != nil {
		return x.ConnectorRef
	}
	return ""
}

func (x *CustomSecretNGManagerConfig) GetSshKey() *SSHKey {
	if x != nil {
		return x.SshKey
	}
	return nil
}

func (x *CustomSecretNGManagerConfig) GetTemplateLinkConfig() *TemplateLinkConfig {
	if x != nil {
		return x.TemplateLinkConfig
	}
	return nil
}

func (x *CustomSecretNGManagerConfig) GetSshEncryptionDetails() []*SecretDetail {
	if x != nil {
		return x.SshEncryptionDetails
	}
	return nil
}

type TemplateLinkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateRef    string                                   `protobuf:"bytes,1,opt,name=template_ref,json=templateRef,proto3" json:"template_ref,omitempty"`
	VersionLabel   string                                   `protobuf:"bytes,2,opt,name=version_label,json=versionLabel,proto3" json:"version_label,omitempty"`
	TemplateInputs map[string]*NameValuePairWithDefaultList `protobuf:"bytes,3,rep,name=template_inputs,json=templateInputs,proto3" json:"template_inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TemplateLinkConfig) Reset() {
	*x = TemplateLinkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateLinkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateLinkConfig) ProtoMessage() {}

func (x *TemplateLinkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateLinkConfig.ProtoReflect.Descriptor instead.
func (*TemplateLinkConfig) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{11}
}

func (x *TemplateLinkConfig) GetTemplateRef() string {
	if x != nil {
		return x.TemplateRef
	}
	return ""
}

func (x *TemplateLinkConfig) GetVersionLabel() string {
	if x != nil {
		return x.VersionLabel
	}
	return ""
}

func (x *TemplateLinkConfig) GetTemplateInputs() map[string]*NameValuePairWithDefaultList {
	if x != nil {
		return x.TemplateInputs
	}
	return nil
}

type NameValuePairWithDefaultList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*NameValuePairWithDefault `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *NameValuePairWithDefaultList) Reset() {
	*x = NameValuePairWithDefaultList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameValuePairWithDefaultList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameValuePairWithDefaultList) ProtoMessage() {}

func (x *NameValuePairWithDefaultList) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameValuePairWithDefaultList.ProtoReflect.Descriptor instead.
func (*NameValuePairWithDefaultList) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{12}
}

func (x *NameValuePairWithDefaultList) GetValues() []*NameValuePairWithDefault {
	if x != nil {
		return x.Values
	}
	return nil
}

type NameValuePairWithDefault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value        string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Type         string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	UseAsDefault bool   `protobuf:"varint,4,opt,name=use_as_default,json=useAsDefault,proto3" json:"use_as_default,omitempty"`
}

func (x *NameValuePairWithDefault) Reset() {
	*x = NameValuePairWithDefault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameValuePairWithDefault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameValuePairWithDefault) ProtoMessage() {}

func (x *NameValuePairWithDefault) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameValuePairWithDefault.ProtoReflect.Descriptor instead.
func (*NameValuePairWithDefault) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{13}
}

func (x *NameValuePairWithDefault) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NameValuePairWithDefault) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *NameValuePairWithDefault) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NameValuePairWithDefault) GetUseAsDefault() bool {
	if x != nil {
		return x.UseAsDefault
	}
	return false
}

type SSHKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port          int32                `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	SshAuthScheme SSHKey_SSHAuthScheme `protobuf:"varint,2,opt,name=ssh_auth_scheme,json=sshAuthScheme,proto3,enum=proto.SSHKey_SSHAuthScheme" json:"ssh_auth_scheme,omitempty"`
	UseSshClient  bool                 `protobuf:"varint,3,opt,name=use_ssh_client,json=useSshClient,proto3" json:"use_ssh_client,omitempty"`
	UseSshJ       bool                 `protobuf:"varint,4,opt,name=use_ssh_j,json=useSshJ,proto3" json:"use_ssh_j,omitempty"`
	// Types that are assignable to SshAuthSpec:
	//
	//	*SSHKey_SshConfig
	//	*SSHKey_KerberosConfig
	SshAuthSpec isSSHKey_SshAuthSpec `protobuf_oneof:"ssh_auth_spec"`
}

func (x *SSHKey) Reset() {
	*x = SSHKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSHKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHKey) ProtoMessage() {}

func (x *SSHKey) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHKey.ProtoReflect.Descriptor instead.
func (*SSHKey) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{14}
}

func (x *SSHKey) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SSHKey) GetSshAuthScheme() SSHKey_SSHAuthScheme {
	if x != nil {
		return x.SshAuthScheme
	}
	return SSHKey_SSH
}

func (x *SSHKey) GetUseSshClient() bool {
	if x != nil {
		return x.UseSshClient
	}
	return false
}

func (x *SSHKey) GetUseSshJ() bool {
	if x != nil {
		return x.UseSshJ
	}
	return false
}

func (m *SSHKey) GetSshAuthSpec() isSSHKey_SshAuthSpec {
	if m != nil {
		return m.SshAuthSpec
	}
	return nil
}

func (x *SSHKey) GetSshConfig() *SSHConfig {
	if x, ok := x.GetSshAuthSpec().(*SSHKey_SshConfig); ok {
		return x.SshConfig
	}
	return nil
}

func (x *SSHKey) GetKerberosConfig() *KerberosConfig {
	if x, ok := x.GetSshAuthSpec().(*SSHKey_KerberosConfig); ok {
		return x.KerberosConfig
	}
	return nil
}

type isSSHKey_SshAuthSpec interface {
	isSSHKey_SshAuthSpec()
}

type SSHKey_SshConfig struct {
	SshConfig *SSHConfig `protobuf:"bytes,5,opt,name=ssh_config,json=sshConfig,proto3,oneof"`
}

type SSHKey_KerberosConfig struct {
	KerberosConfig *KerberosConfig `protobuf:"bytes,6,opt,name=kerberos_config,json=kerberosConfig,proto3,oneof"`
}

func (*SSHKey_SshConfig) isSSHKey_SshAuthSpec() {}

func (*SSHKey_KerberosConfig) isSSHKey_SshAuthSpec() {}

// ssh config
type SSHConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SshCredentialType SSHConfig_SSHCredentialType `protobuf:"varint,1,opt,name=ssh_credential_type,json=sshCredentialType,proto3,enum=proto.SSHConfig_SSHCredentialType" json:"ssh_credential_type,omitempty"`
	// Types that are assignable to CredentialSpec:
	//
	//	*SSHConfig_KeyPathCredential
	//	*SSHConfig_KeyReferenceCredential
	//	*SSHConfig_PasswordCredential
	CredentialSpec isSSHConfig_CredentialSpec `protobuf_oneof:"credential_spec"`
}

func (x *SSHConfig) Reset() {
	*x = SSHConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSHConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHConfig) ProtoMessage() {}

func (x *SSHConfig) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHConfig.ProtoReflect.Descriptor instead.
func (*SSHConfig) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{15}
}

func (x *SSHConfig) GetSshCredentialType() SSHConfig_SSHCredentialType {
	if x != nil {
		return x.SshCredentialType
	}
	return SSHConfig_PASSWORD
}

func (m *SSHConfig) GetCredentialSpec() isSSHConfig_CredentialSpec {
	if m != nil {
		return m.CredentialSpec
	}
	return nil
}

func (x *SSHConfig) GetKeyPathCredential() *SSHKeyPathCredential {
	if x, ok := x.GetCredentialSpec().(*SSHConfig_KeyPathCredential); ok {
		return x.KeyPathCredential
	}
	return nil
}

func (x *SSHConfig) GetKeyReferenceCredential() *SSHKeyReferenceCredential {
	if x, ok := x.GetCredentialSpec().(*SSHConfig_KeyReferenceCredential); ok {
		return x.KeyReferenceCredential
	}
	return nil
}

func (x *SSHConfig) GetPasswordCredential() *SSHPasswordCredential {
	if x, ok := x.GetCredentialSpec().(*SSHConfig_PasswordCredential); ok {
		return x.PasswordCredential
	}
	return nil
}

type isSSHConfig_CredentialSpec interface {
	isSSHConfig_CredentialSpec()
}

type SSHConfig_KeyPathCredential struct {
	KeyPathCredential *SSHKeyPathCredential `protobuf:"bytes,2,opt,name=key_path_credential,json=keyPathCredential,proto3,oneof"`
}

type SSHConfig_KeyReferenceCredential struct {
	KeyReferenceCredential *SSHKeyReferenceCredential `protobuf:"bytes,3,opt,name=key_reference_credential,json=keyReferenceCredential,proto3,oneof"`
}

type SSHConfig_PasswordCredential struct {
	PasswordCredential *SSHPasswordCredential `protobuf:"bytes,4,opt,name=password_credential,json=passwordCredential,proto3,oneof"`
}

func (*SSHConfig_KeyPathCredential) isSSHConfig_CredentialSpec() {}

func (*SSHConfig_KeyReferenceCredential) isSSHConfig_CredentialSpec() {}

func (*SSHConfig_PasswordCredential) isSSHConfig_CredentialSpec() {}

type SSHKeyPathCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	KeyPath    string `protobuf:"bytes,2,opt,name=key_path,json=keyPath,proto3" json:"key_path,omitempty"`
	PassPhrase string `protobuf:"bytes,3,opt,name=pass_phrase,json=passPhrase,proto3" json:"pass_phrase,omitempty"`
}

func (x *SSHKeyPathCredential) Reset() {
	*x = SSHKeyPathCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSHKeyPathCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHKeyPathCredential) ProtoMessage() {}

func (x *SSHKeyPathCredential) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHKeyPathCredential.ProtoReflect.Descriptor instead.
func (*SSHKeyPathCredential) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{16}
}

func (x *SSHKeyPathCredential) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SSHKeyPathCredential) GetKeyPath() string {
	if x != nil {
		return x.KeyPath
	}
	return ""
}

func (x *SSHKeyPathCredential) GetPassPhrase() string {
	if x != nil {
		return x.PassPhrase
	}
	return ""
}

type SSHKeyReferenceCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Key        string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	PassPhrase string `protobuf:"bytes,3,opt,name=pass_phrase,json=passPhrase,proto3" json:"pass_phrase,omitempty"`
}

func (x *SSHKeyReferenceCredential) Reset() {
	*x = SSHKeyReferenceCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSHKeyReferenceCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHKeyReferenceCredential) ProtoMessage() {}

func (x *SSHKeyReferenceCredential) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHKeyReferenceCredential.ProtoReflect.Descriptor instead.
func (*SSHKeyReferenceCredential) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{17}
}

func (x *SSHKeyReferenceCredential) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SSHKeyReferenceCredential) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SSHKeyReferenceCredential) GetPassPhrase() string {
	if x != nil {
		return x.PassPhrase
	}
	return ""
}

type SSHPasswordCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *SSHPasswordCredential) Reset() {
	*x = SSHPasswordCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSHPasswordCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHPasswordCredential) ProtoMessage() {}

func (x *SSHPasswordCredential) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHPasswordCredential.ProtoReflect.Descriptor instead.
func (*SSHPasswordCredential) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{18}
}

func (x *SSHPasswordCredential) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SSHPasswordCredential) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Kerberos
type KerberosConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Principal           string                             `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	Realm               string                             `protobuf:"bytes,2,opt,name=realm,proto3" json:"realm,omitempty"`
	TgtGenerationMethod KerberosConfig_TGTGenerationMethod `protobuf:"varint,3,opt,name=tgt_generation_method,json=tgtGenerationMethod,proto3,enum=proto.KerberosConfig_TGTGenerationMethod" json:"tgt_generation_method,omitempty"`
	// Types that are assignable to TgtGeneration_Spec:
	//
	//	*KerberosConfig_TgtTabFilePathSpec
	//	*KerberosConfig_TgtPasswordSpec
	TgtGeneration_Spec isKerberosConfig_TgtGeneration_Spec `protobuf_oneof:"tgt_generation_Spec"`
}

func (x *KerberosConfig) Reset() {
	*x = KerberosConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KerberosConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KerberosConfig) ProtoMessage() {}

func (x *KerberosConfig) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KerberosConfig.ProtoReflect.Descriptor instead.
func (*KerberosConfig) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{19}
}

func (x *KerberosConfig) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *KerberosConfig) GetRealm() string {
	if x != nil {
		return x.Realm
	}
	return ""
}

func (x *KerberosConfig) GetTgtGenerationMethod() KerberosConfig_TGTGenerationMethod {
	if x != nil {
		return x.TgtGenerationMethod
	}
	return KerberosConfig_KEY_TAB_FILE_PATH
}

func (m *KerberosConfig) GetTgtGeneration_Spec() isKerberosConfig_TgtGeneration_Spec {
	if m != nil {
		return m.TgtGeneration_Spec
	}
	return nil
}

func (x *KerberosConfig) GetTgtTabFilePathSpec() *TGTKeyTabFilePathSpec {
	if x, ok := x.GetTgtGeneration_Spec().(*KerberosConfig_TgtTabFilePathSpec); ok {
		return x.TgtTabFilePathSpec
	}
	return nil
}

func (x *KerberosConfig) GetTgtPasswordSpec() *TGTPasswordSpec {
	if x, ok := x.GetTgtGeneration_Spec().(*KerberosConfig_TgtPasswordSpec); ok {
		return x.TgtPasswordSpec
	}
	return nil
}

type isKerberosConfig_TgtGeneration_Spec interface {
	isKerberosConfig_TgtGeneration_Spec()
}

type KerberosConfig_TgtTabFilePathSpec struct {
	TgtTabFilePathSpec *TGTKeyTabFilePathSpec `protobuf:"bytes,4,opt,name=tgt_tab_file_path_spec,json=tgtTabFilePathSpec,proto3,oneof"`
}

type KerberosConfig_TgtPasswordSpec struct {
	TgtPasswordSpec *TGTPasswordSpec `protobuf:"bytes,5,opt,name=tgt_password_spec,json=tgtPasswordSpec,proto3,oneof"`
}

func (*KerberosConfig_TgtTabFilePathSpec) isKerberosConfig_TgtGeneration_Spec() {}

func (*KerberosConfig_TgtPasswordSpec) isKerberosConfig_TgtGeneration_Spec() {}

type TGTKeyTabFilePathSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyPath string `protobuf:"bytes,1,opt,name=key_path,json=keyPath,proto3" json:"key_path,omitempty"`
}

func (x *TGTKeyTabFilePathSpec) Reset() {
	*x = TGTKeyTabFilePathSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGTKeyTabFilePathSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGTKeyTabFilePathSpec) ProtoMessage() {}

func (x *TGTKeyTabFilePathSpec) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGTKeyTabFilePathSpec.ProtoReflect.Descriptor instead.
func (*TGTKeyTabFilePathSpec) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{20}
}

func (x *TGTKeyTabFilePathSpec) GetKeyPath() string {
	if x != nil {
		return x.KeyPath
	}
	return ""
}

type TGTPasswordSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *TGTPasswordSpec) Reset() {
	*x = TGTPasswordSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_details_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGTPasswordSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGTPasswordSpec) ProtoMessage() {}

func (x *TGTPasswordSpec) ProtoReflect() protoreflect.Message {
	mi := &file_secret_details_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGTPasswordSpec.ProtoReflect.Descriptor instead.
func (*TGTPasswordSpec) Descriptor() ([]byte, []int) {
	return file_secret_details_proto_rawDescGZIP(), []int{21}
}

func (x *TGTPasswordSpec) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

var File_secret_details_proto protoreflect.FileDescriptor

var file_secret_details_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x01,
	0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x52,
	0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f,
	0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0xfc, 0x05, 0x0a, 0x24, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x6b, 0x6d, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x6d,
	0x73, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a,
	0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6b, 0x6d, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4b, 0x6d, 0x73, 0x49,
	0x64, 0x12, 0x4b, 0x0a, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x74, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x45, 0x0a, 0x17, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x3f, 0x0a, 0x13, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x80, 0x07, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6b, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x4b, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x47, 0x0a, 0x12, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x56, 0x61, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x10, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0c,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x0b, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5b,
	0x0a, 0x19, 0x67, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x63, 0x70, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x16, 0x67, 0x63, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5b, 0x0a, 0x19, 0x61,
	0x77, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x77, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x16, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0e, 0x67, 0x63, 0x70, 0x5f,
	0x6b, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x63, 0x70, 0x4b, 0x6d, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x63, 0x70, 0x4b, 0x6d, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x6b, 0x6d, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x77, 0x73, 0x4b, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x4b, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x65, 0x0a, 0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x47, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x19,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1b, 0x0a, 0x19, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x83, 0x05, 0x0a, 0x10, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x16, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x14, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6f, 0x0a, 0x1b, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x56, 0x61, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x18, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x14, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x55, 0x53, 0x5f, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x22, 0x64, 0x0a, 0x18, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x53, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x44, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x01, 0x22, 0xd5, 0x05, 0x0a,
	0x14, 0x48, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x52, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x6e, 0x6b,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x6e,
	0x6b, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x77, 0x73,
	0x5f, 0x69, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73, 0x65, 0x41,
	0x77, 0x73, 0x49, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x12, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61,
	0x77, 0x73, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x77, 0x73, 0x49, 0x61, 0x6d, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x77, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x19, 0x78, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x77, 0x73,
	0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x78, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x77, 0x73, 0x49,
	0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x5f, 0x6b, 0x38, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x75, 0x73, 0x65, 0x4b, 0x38, 0x73, 0x41, 0x75, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x13,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6b, 0x38, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x4b, 0x38, 0x73, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x6b, 0x38, 0x73, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6b, 0x38, 0x73, 0x41, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x17, 0x47, 0x63, 0x70, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x45, 0x0a, 0x1f, 0x67, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x67, 0x63, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x61, 0x73, 0x73, 0x75, 0x6d,
	0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x4f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x22, 0x92, 0x03, 0x0a,
	0x17, 0x41, 0x77, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x3c, 0x0a, 0x1b,
	0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x49, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65,
	0x4f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x61, 0x73,
	0x73, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x73, 0x73, 0x75,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x61, 0x73, 0x73, 0x75,
	0x6d, 0x65, 0x53, 0x74, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0c, 0x47, 0x63, 0x70, 0x4b, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x52, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x45, 0x0a, 0x1f, 0x67, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x67, 0x63, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0xf2, 0x02, 0x0a, 0x0c, 0x41, 0x77, 0x73, 0x4b, 0x6d,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x6d, 0x73, 0x5f, 0x61, 0x72, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x6d, 0x73, 0x41, 0x72, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1b, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65,
	0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x61, 0x73, 0x73,
	0x75, 0x6d, 0x65, 0x49, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x6e, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x61, 0x73, 0x73, 0x75, 0x6d,
	0x65, 0x53, 0x74, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x73,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x73, 0x52,
	0x6f, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x03, 0x0a, 0x1b,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x47, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4f,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x12,
	0x26, 0x0a, 0x07, 0x73, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x52,
	0x06, 0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x16, 0x73, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x14, 0x73, 0x73, 0x68, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x9c, 0x02, 0x0a, 0x12, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x56,
	0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x66, 0x0a, 0x13, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x57,
	0x0a, 0x1c, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x7e, 0x0a, 0x18, 0x4e, 0x61, 0x6d, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x41, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xd1, 0x02, 0x0a, 0x06, 0x53, 0x53, 0x48, 0x4b,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x73, 0x68, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x2e, 0x53,
	0x53, 0x48, 0x41, 0x75, 0x74, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x0d, 0x73, 0x73,
	0x68, 0x41, 0x75, 0x74, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x75,
	0x73, 0x65, 0x5f, 0x73, 0x73, 0x68, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x53, 0x73, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x73, 0x68, 0x5f, 0x6a, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x53, 0x73, 0x68, 0x4a, 0x12, 0x31, 0x0a,
	0x0a, 0x73, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x73, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x40, 0x0a, 0x0f, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x0e, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x26, 0x0a, 0x0d, 0x53, 0x53, 0x48, 0x41, 0x75, 0x74, 0x68, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x53, 0x48, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x4b, 0x45, 0x52, 0x42, 0x45, 0x52, 0x4f, 0x53, 0x10, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x73,
	0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x22, 0xb4, 0x03, 0x0a, 0x09,
	0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x13, 0x73, 0x73, 0x68,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x53, 0x48, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x73, 0x73, 0x68, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a,
	0x13, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x6b, 0x65, 0x79, 0x50, 0x61,
	0x74, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x5c, 0x0a, 0x18,
	0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x16, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x13, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x53, 0x48, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x42, 0x0a, 0x11, 0x53,
	0x53, 0x48, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x42,
	0x11, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x22, 0x6e, 0x0a, 0x14, 0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x50, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x22, 0x6a, 0x0a, 0x19, 0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x22, 0x4f,
	0x0a, 0x15, 0x53, 0x53, 0x48, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x90, 0x03, 0x0a, 0x0e, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x5d, 0x0a, 0x15, 0x74, 0x67, 0x74, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65,
	0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x47, 0x54,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x13, 0x74, 0x67, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x52, 0x0a, 0x16, 0x74, 0x67, 0x74, 0x5f, 0x74, 0x61, 0x62,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x47,
	0x54, 0x4b, 0x65, 0x79, 0x54, 0x61, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x53,
	0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x12, 0x74, 0x67, 0x74, 0x54, 0x61, 0x62, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12, 0x44, 0x0a, 0x11, 0x74, 0x67, 0x74,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x47, 0x54,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x0f,
	0x74, 0x67, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x22,
	0x3a, 0x0a, 0x13, 0x54, 0x47, 0x54, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x41,
	0x42, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x74,
	0x67, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x70,
	0x65, 0x63, 0x22, 0x32, 0x0a, 0x15, 0x54, 0x47, 0x54, 0x4b, 0x65, 0x79, 0x54, 0x61, 0x62, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x6b,
	0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x22, 0x2d, 0x0a, 0x0f, 0x54, 0x47, 0x54, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x2a, 0xc5, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x57, 0x53, 0x5f, 0x4b, 0x4d, 0x53, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x43,
	0x50, 0x5f, 0x4b, 0x4d, 0x53, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x57, 0x53, 0x5f, 0x53,
	0x45, 0x43, 0x52, 0x45, 0x54, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x05,
	0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x56, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x06, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x41, 0x53, 0x48, 0x49, 0x43, 0x4f, 0x52, 0x50, 0x5f, 0x56,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x43, 0x50, 0x5f, 0x53, 0x45,
	0x43, 0x52, 0x45, 0x54, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x08, 0x12,
	0x0d, 0x0a, 0x09, 0x56, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x53, 0x48, 0x10, 0x09, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x4e, 0x47, 0x10, 0x0a, 0x2a, 0x5c, 0x0a,
	0x11, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x4d,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x56,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x53, 0x48, 0x10, 0x05, 0x42, 0x0e, 0x5a, 0x0c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_secret_details_proto_rawDescOnce sync.Once
	file_secret_details_proto_rawDescData = file_secret_details_proto_rawDesc
)

func file_secret_details_proto_rawDescGZIP() []byte {
	file_secret_details_proto_rawDescOnce.Do(func() {
		file_secret_details_proto_rawDescData = protoimpl.X.CompressGZIP(file_secret_details_proto_rawDescData)
	})
	return file_secret_details_proto_rawDescData
}

var file_secret_details_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_secret_details_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_secret_details_proto_goTypes = []interface{}{
	(EncryptionType)(0),                            // 0: proto.EncryptionType
	(SecretManagerType)(0),                         // 1: proto.SecretManagerType
	(AzureVaultConfig_AzureEnvironmentType)(0),     // 2: proto.AzureVaultConfig.AzureEnvironmentType
	(AzureVaultConfig_AzureManagedIdentityType)(0), // 3: proto.AzureVaultConfig.AzureManagedIdentityType
	(SSHKey_SSHAuthScheme)(0),                      // 4: proto.SSHKey.SSHAuthScheme
	(SSHConfig_SSHCredentialType)(0),               // 5: proto.SSHConfig.SSHCredentialType
	(KerberosConfig_TGTGenerationMethod)(0),        // 6: proto.KerberosConfig.TGTGenerationMethod
	(*SecretDetail)(nil),                           // 7: proto.SecretDetail
	(*EncryptedRecordForDelegateDecryption)(nil),   // 8: proto.EncryptedRecordForDelegateDecryption
	(*EncryptedDataParams)(nil),                    // 9: proto.EncryptedDataParams
	(*EncryptionConfig)(nil),                       // 10: proto.EncryptionConfig
	(*AzureVaultConfig)(nil),                       // 11: proto.AzureVaultConfig
	(*HashicorpVaultConfig)(nil),                   // 12: proto.HashicorpVaultConfig
	(*GcpSecretsManagerConfig)(nil),                // 13: proto.GcpSecretsManagerConfig
	(*AwsSecretsManagerConfig)(nil),                // 14: proto.AwsSecretsManagerConfig
	(*GcpKmsConfig)(nil),                           // 15: proto.GcpKmsConfig
	(*AwsKmsConfig)(nil),                           // 16: proto.AwsKmsConfig
	(*CustomSecretNGManagerConfig)(nil),            // 17: proto.CustomSecretNGManagerConfig
	(*TemplateLinkConfig)(nil),                     // 18: proto.TemplateLinkConfig
	(*NameValuePairWithDefaultList)(nil),           // 19: proto.NameValuePairWithDefaultList
	(*NameValuePairWithDefault)(nil),               // 20: proto.NameValuePairWithDefault
	(*SSHKey)(nil),                                 // 21: proto.SSHKey
	(*SSHConfig)(nil),                              // 22: proto.SSHConfig
	(*SSHKeyPathCredential)(nil),                   // 23: proto.SSHKeyPathCredential
	(*SSHKeyReferenceCredential)(nil),              // 24: proto.SSHKeyReferenceCredential
	(*SSHPasswordCredential)(nil),                  // 25: proto.SSHPasswordCredential
	(*KerberosConfig)(nil),                         // 26: proto.KerberosConfig
	(*TGTKeyTabFilePathSpec)(nil),                  // 27: proto.TGTKeyTabFilePathSpec
	(*TGTPasswordSpec)(nil),                        // 28: proto.TGTPasswordSpec
	nil,                                            // 29: proto.EncryptedRecordForDelegateDecryption.AdditionalMetadataEntry
	nil,                                            // 30: proto.TemplateLinkConfig.TemplateInputsEntry
}
var file_secret_details_proto_depIdxs = []int32{
	8,  // 0: proto.SecretDetail.encrypted_data:type_name -> proto.EncryptedRecordForDelegateDecryption
	10, // 1: proto.SecretDetail.config:type_name -> proto.EncryptionConfig
	9,  // 2: proto.EncryptedRecordForDelegateDecryption.params:type_name -> proto.EncryptedDataParams
	0,  // 3: proto.EncryptedRecordForDelegateDecryption.encryption_type:type_name -> proto.EncryptionType
	0,  // 4: proto.EncryptedRecordForDelegateDecryption.backup_encryption_type:type_name -> proto.EncryptionType
	29, // 5: proto.EncryptedRecordForDelegateDecryption.additional_metadata:type_name -> proto.EncryptedRecordForDelegateDecryption.AdditionalMetadataEntry
	0,  // 6: proto.EncryptionConfig.encryption_type:type_name -> proto.EncryptionType
	1,  // 7: proto.EncryptionConfig.secret_manager_type:type_name -> proto.SecretManagerType
	11, // 8: proto.EncryptionConfig.azure_vault_config:type_name -> proto.AzureVaultConfig
	12, // 9: proto.EncryptionConfig.vault_config:type_name -> proto.HashicorpVaultConfig
	13, // 10: proto.EncryptionConfig.gcp_secret_manager_config:type_name -> proto.GcpSecretsManagerConfig
	14, // 11: proto.EncryptionConfig.aws_secret_manager_config:type_name -> proto.AwsSecretsManagerConfig
	15, // 12: proto.EncryptionConfig.gcp_kms_config:type_name -> proto.GcpKmsConfig
	16, // 13: proto.EncryptionConfig.aws_kms_config:type_name -> proto.AwsKmsConfig
	17, // 14: proto.EncryptionConfig.custom_secret_manager_config:type_name -> proto.CustomSecretNGManagerConfig
	2,  // 15: proto.AzureVaultConfig.azure_environment_type:type_name -> proto.AzureVaultConfig.AzureEnvironmentType
	3,  // 16: proto.AzureVaultConfig.azure_managed_identity_type:type_name -> proto.AzureVaultConfig.AzureManagedIdentityType
	21, // 17: proto.CustomSecretNGManagerConfig.ssh_key:type_name -> proto.SSHKey
	18, // 18: proto.CustomSecretNGManagerConfig.template_link_config:type_name -> proto.TemplateLinkConfig
	7,  // 19: proto.CustomSecretNGManagerConfig.ssh_encryption_details:type_name -> proto.SecretDetail
	30, // 20: proto.TemplateLinkConfig.template_inputs:type_name -> proto.TemplateLinkConfig.TemplateInputsEntry
	20, // 21: proto.NameValuePairWithDefaultList.values:type_name -> proto.NameValuePairWithDefault
	4,  // 22: proto.SSHKey.ssh_auth_scheme:type_name -> proto.SSHKey.SSHAuthScheme
	22, // 23: proto.SSHKey.ssh_config:type_name -> proto.SSHConfig
	26, // 24: proto.SSHKey.kerberos_config:type_name -> proto.KerberosConfig
	5,  // 25: proto.SSHConfig.ssh_credential_type:type_name -> proto.SSHConfig.SSHCredentialType
	23, // 26: proto.SSHConfig.key_path_credential:type_name -> proto.SSHKeyPathCredential
	24, // 27: proto.SSHConfig.key_reference_credential:type_name -> proto.SSHKeyReferenceCredential
	25, // 28: proto.SSHConfig.password_credential:type_name -> proto.SSHPasswordCredential
	6,  // 29: proto.KerberosConfig.tgt_generation_method:type_name -> proto.KerberosConfig.TGTGenerationMethod
	27, // 30: proto.KerberosConfig.tgt_tab_file_path_spec:type_name -> proto.TGTKeyTabFilePathSpec
	28, // 31: proto.KerberosConfig.tgt_password_spec:type_name -> proto.TGTPasswordSpec
	19, // 32: proto.TemplateLinkConfig.TemplateInputsEntry.value:type_name -> proto.NameValuePairWithDefaultList
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_secret_details_proto_init() }
func file_secret_details_proto_init() {
	if File_secret_details_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_secret_details_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedRecordForDelegateDecryption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedDataParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureVaultConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashicorpVaultConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcpSecretsManagerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsSecretsManagerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcpKmsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsKmsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomSecretNGManagerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateLinkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameValuePairWithDefaultList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameValuePairWithDefault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHKeyPathCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHKeyReferenceCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHPasswordCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KerberosConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGTKeyTabFilePathSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_details_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGTPasswordSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_secret_details_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*EncryptionConfig_AzureVaultConfig)(nil),
		(*EncryptionConfig_VaultConfig)(nil),
		(*EncryptionConfig_GcpSecretManagerConfig)(nil),
		(*EncryptionConfig_AwsSecretManagerConfig)(nil),
		(*EncryptionConfig_GcpKmsConfig)(nil),
		(*EncryptionConfig_AwsKmsConfig)(nil),
		(*EncryptionConfig_CustomSecretManagerConfig)(nil),
	}
	file_secret_details_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*SSHKey_SshConfig)(nil),
		(*SSHKey_KerberosConfig)(nil),
	}
	file_secret_details_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*SSHConfig_KeyPathCredential)(nil),
		(*SSHConfig_KeyReferenceCredential)(nil),
		(*SSHConfig_PasswordCredential)(nil),
	}
	file_secret_details_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*KerberosConfig_TgtTabFilePathSpec)(nil),
		(*KerberosConfig_TgtPasswordSpec)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_secret_details_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_secret_details_proto_goTypes,
		DependencyIndexes: file_secret_details_proto_depIdxs,
		EnumInfos:         file_secret_details_proto_enumTypes,
		MessageInfos:      file_secret_details_proto_msgTypes,
	}.Build()
	File_secret_details_proto = out.File
	file_secret_details_proto_rawDesc = nil
	file_secret_details_proto_goTypes = nil
	file_secret_details_proto_depIdxs = nil
}
